Changes in OSE Version 7.0pl12
------------------------------

  + Bugs Fixed

    - When using ignoreReports() member function of Service class in Python
      wrappers, reports were not actually being unsubscribe properly.

    - Decoding of ISO8601 duration formation in Python wrappers wasn't
      allowing some parts to be optional.

    - Fix in Python wrappers whereby the Python complex data type was not
      being decoded correctly.

    - Fix potential ordering issue with active/inactive events related to
      socket connections. In a heavily loaded application, an active event
      for a socket could get processed before the inactive event for the prior
      socket connection from the same client. This could possibly have had
      adverse impacts on the higher level messaging framework.


Changes in OSE Version 7.0pl11
------------------------------

  + Migration Issues

    - Don't count on ObjectStore OODBMS working anymore. Support for
      ObjectStore has been removed from the C++ library in the upcoming OSE
      version 8.0. ObjectStore and Versant support have also been removed
      from the build environment in OSE version 8.0.

  + Bugs Fixed

    - The OTC_Program::uniqueId() method for generating psuedo unique
      identifiers could return the same identifier more than once when
      being called by multiple threads at the same time.

    - The OTC_Logger and OTC_Mutex class wouldn't compile on newer versions
      of POSIX threads library for Win32 platform. In making it compile,
      the logger class will on all platforms no longer display the thread
      ID in log output.

    - The XML-RPC and NET-RPC client side objects, didn't properly allow
      a decode function to be specified. The ability to do this can be
      required on newer versions of Python where strings are all returned
      as Unicode strings. A decode function can be supplied which can map
      them back to a standard string.

    - The XML-RPC C++ gateway was incorrectly converting a struct with a
      key/member name with a '.' in it. Instead of preserving a struct of
      the form { "a.b": 1 }, it was converting it to { "a": { "b": 1 } }.

    - Manner in which "cgi" module was import in netsvc module was a bit
      dodgy and code was rejected on some versions of Python.


Changes in OSE Version 7.0pl10
------------------------------

  + Bugs Fixed

    - Python FileServer instance wasn't redirecting access to subdirectories
      of tree to URL which had a trailing slash.

    - Python netrpc.xmlrpc module wasn't encoding boolean values correctly
      into XML-RPC responses.

    - Python netrpc/netrpc.xmlrpc modules weren't processing date types
      correctly when read in as unicode strings.

    - Improved Python ModuleCache to ensure that changes to child modules
      always correctly ensure that parent is reloaded.

  + Python Wrappers

    - When checking if OTCLIB_NOLOGSTDERR was being set in the environment,
      was using os.environ.has_key(). This will not work though if the
      variable was set using os.putenv() just prior to import. Should have
      used netsvc.lookupEnviron() instead.

    - Added mod_python handler support into netrpc.xmlrpc.


Changes in OSE Version 7.0pl9
-----------------------------

  + Bugs Fixed

    - Fixed memory leak in headers() method of HttpServlet and HttpSession
      Python wrapper classes.

  + Python Wrappers

    - In cases where a callback occurred in Python code from C++ code,
      if a Python exception occurred, the details of the exception were
      logged and the application shutdown if possible. Code no longer
      terminates application but will log then exception. This behaviour
      can in most class be changed by overriding unexpectedException()
      method.

    - Try to use expat module when doing XML parsing before defaulting
      to using xmllib. This can get rid of deprecated warnings for xmllib
      on newer versions of Python.


Changes in OSE Version 7.0pl8
-----------------------------

  + Bugs Fixed

    - If the contents of a source directory haven't yet been built and
      the "install" target is used, if there is a shared library in the
      directory to be built, it isn't getting built correctly.

    - Python wrappers weren't using Python type objects correctly for
      class and instance types. This was causing type decoding and 
      encoding to fail.

    - Python wrappers didn't understand the Python bool type in Python
      version 2.3. The netrpc Boolean type is now an alias for the
      builtin Python bool type when it is implemented. Extra changes
      were also needed in the C++ component of the wrappers because a
      Python bool also passes a Python int check.
      
    - When using cancelResponse() or cancelAllResponses() with the Python
      Service class, the suspended request record wasn't getting deleted.

    - In OTC_Exchange class, wasn't correct removing itself from the
      exchange registry and receiver name and not group name being used.

    - On Win32, if OTC_Program::uniqueId() was called prior to WinSock
      library initialisation, hostname was being used in IDs instead
      of IP address. This was upsetting the messaging system generation
      of agent identity and process identity which assumed it was the
      IP address. Fixed OTC_ServiceBinding so that it would also accept
      hostname if detected instead of IP address and not leave the agent
      identity and process identity fields empty. 

    - Nonblocking socket connects on Win32 now enabled as reason for it
      not working have been worked out.

    - In OTC_Exchange, when using multiple exchange servers, services
      could be duplicated.

    - In Python Monitor class, memory leak was occuring due to results
      from registry lookup functions not performing reference counting
      correctly.

    - In Python Service class, using a service binding object as first
      argument to subscribeReports() and unsubscribeReports() was
      resulting in runtime error because error state wasn't being
      cleared.

    - Publisher notification event wasn't being delivered to service when
      subscribing to reports using a service binding. This was happening
      for both service available and service withdrawn cases.

    - In message passing socket interface, when using non blocking socket,
      a blocked call to recv() wouldn't be detected properly when reading
      initial message magic header and size. This was only presenting
      itself as a problem on slow networks and would result in the socket
      connection being dropped.

    - Handling of blocking reads in general wasn't always working all
      the time when the message passing socket interface was used.
      Especially with large messages or slow networks.

    - Made change to Win32 OTC_CVMutex implementation as indicated by
      someone it was wrong and why condition variable didn't work
      reliably. Haven't been able to independently verify change. If
      bigger thread issues now come up on Win32, this change may be
      the cause. Try and use POSIX threads on Win32 as works better
      anyway.

    - The activateThreading() method of Agent class in Python wrappers
      has been fixed. It wasn't correctly creating Python thread state
      and so Python would crash if thread swap occurred in the middle
      of handling an event.

    - Changed how derived ostream classes are initialised to make it
      portable and not require compiler specific checks.


Changes in OSE Version 7.0pl7
-----------------------------

    - If you weren't using the timeout feature of processFailure() in
      the Python wrappers Service class, but were creating your own
      timer with the conversation ID being the timer name, that timer
      will no longer be automatically cancelled when a valid response
      or failure is is received for the request being monitored. This
      was previously the case, but processFailure() and the associated
      implementation now creates its timer within its own namespace
      so your timer will no longer be cancelled automatically.

    - If using Python wrappers Service class and you were resuming a
      response and in doing so were relying on the registered callback
      for that response to be called immediately, you will need to
      modify your code. This is because the resumption callback is now
      scheduled as a distinct callback within the dispatcher and is
      not called immediately at the point resumeResponse() is called.

    - The makeit C++ module for files with a ".C" extension is no longer
      installed on any system. The module caused too much problems with
      filesystems which weren't case sensitive.

  + Bugs Fixed

    - Fixed serious XML encoding bug whereby string to be encoded was
      corrupted when encoding if it contained any of the special XML
      markup characters within the body of the text.

    - When doing read only lookups on the service registry where an
      iterator was returned, there was a chance of the internal data
      collection reference counts being corrupted in a multithreaded
      application because the iterators over the internal data collections
      weren't nulled to release the collection prior to the thread mutex
      being unlocked nor were the iterators created in unsafe mode to
      avoid doing reference counts when iterating through items when
      creating a new collection on which the returned iterator was
      constructed. The issue of not nulling out the iterator before
      the mutex was unlocked was also an issue in some of the operations
      which update the collections.

    - Winsock 2 library name wrong in MS.MAK and missing object file in
      Python makefile for MS C++.

    - Removed possibility of data structure corruption in internals of
      the OTCEV_Action event class handling when multithreading used.

    - The "check" module now works when SRCDIRS is used to pick up source
      code from a different directory. Note that you can't generate new
      test output files for use in the diff in the directory where SRCDIRS
      is being set, it has to be done in the original directory.

    - If a separate thread to the main dispatcher thread called stop()
      on the dispatcher, it would block until a subsequent event came
      ready and wouldn't actually cause the dispatcher to stop straight
      away if possible.

    - In OTC_Exchange the client and listener weren't being added to the
      internal map prior to starting the client and/or listener. If the
      client or listener were being set up in a thread different to the
      main thread, it was possible that the exchange would get the
      connection notification before the map had been set up and it would
      ignore the connection and display a warning message. There were
      also more general problems in that the OTC_Exchange class was really
      only setup to allow client and listeners to be defined from the
      main dispatcher thread. Implementation now made to be threadsafe.

    - When sending opaque messages over the messaging system, when received
      the description field was not getting set to the description, but
      the message ID field.

    - In newer versions of Python, functions such as time.gmtime() don't
      return a tuple type but a wrapper of a C type. This was causing
      problems with the Date/Time classes provided with Python wrappers
      which were expecting it to be a tuple.

  + C++ Class Library

    - Reverse name lookups are no longer done to try and derive a FQDN
      for the agent and process identity associated with a service binding.
      This is because the process would stall if there was no DNS or it was
      not contactable. For consistancy, better to always use the IP.

  + Python Wrappers

    - Removed the ability to specify the queue size when calling
      activateThreading() in Agent class. Had to do this because if
      defined, agent could deadlock on itself when trying to schedule an
      event destined for itself.

    - Dropped the networkGroup() method in Service class as it doesn't
      mean much when called on local service agent as the result will
      always be an empty string.

    - When cancelling service requests any failure callbacks are no longer
      called immediately but as a distinct scheduled callback.

    - No longer possible to gain access to the details of the last request
      which was made by the Service class. That is, lastRequest() method
      has been removed.

    - If failure response was generated due to not being able to decode
      the real response, the original response is now available using
      currentResponse() along with the failure using currentFailure().

    - When creating a response timeout with processFailure(), the timer
      ID is now given a prefix rather than just using the conversation
      ID by itself. This ensures that the conversation ID can be used
      as a timer name, alarm name, action name etc in user code.

    - If a request is sent to a service agent which doesn't actually
      exist and failure callbacks are being monitored, the failure
      callback notifying that the service was withdrawn is now peformed
      as a separately scheduled callback rather than being immediate.

    - When resuming a response, the registered callback for resumption
      is no longer called immediately but is scheduled as a distinct
      callback from the dispatcher.

    - Add reset(), isWaiting(), isRunning() and isStopped() into the
      Dispatcher class which is a wrapper around OTC_Dispatcher.

  + Documentation Tools

    - The class2mml program now ensures there are no carriage returns or
      new lines in the output files. Where there was a new line, it is
      replaced with a space. This was required because MML files when
      used with FrameMaker on MAC would have stuffed up formatting because
      of the newline. It is hope that use of a space doesn't cause other
      problems.


Changes in OSE Version 7.0pl6
-----------------------------

  + Bugs Fixed

    - The memory cluster class OTC_MCObject had a bug which was only
      triggered if multithreading was used and two distinct threads
      tried to create a derived instance of OTC_MCObject at the same
      time with the calls to operator new() for OTC_MCObject and the
      constructor for OTC_MCObject being interleaved in a certain way
      in time across the two threads. This class is used in the
      messaging system payload objects, so if agent threading was
      used in conjunction with the messaging system, it was possible
      to trigger the bug.

    - Previous patch changed logger to use snprintf() to avoid possibility
      of buffer overflows if environment set to a value larger than maximum
      path length. Win32 platform doesn't have this function.

    - The OTC_Logger class was using the gethostname() function on Win32,
      but if WinSock wasn't being used and hadn't been initialised, this
      would result in an empty host name being filled out in log filename
      when the "%h" tag was being used. Now use the GetComputerName()
      function on Win32 platform. Similar issue with the static member
      function OTC_Program::hostname().

    - The code being used to place sockets into nonblocking mode on Win32
      platforms was complete bogus and wasn't doing what was intended.
      Nonblocking sockets should now be getting used on Win32 for stream
      and message based socket connections.

    - Fixed potential reliability issues in the event system with the
      handling of signals on Win32 systems. Seems to even work properly on
      Win98 now which was giving a lot of problems before.

    - Symlink to GNU make under Cygwin wasn't being created correctly.

    - The makeit shell script when installed under Cygwin was being given
      a MKS Korn shell .ksh extension.

    - Compiler config for Microsoft C++ should have always been using
      the -MD options and not -ML as signal handling makes use of threads
      even if thread support not compiled into OSE.

    - Even when no DLL version of OSE libraries installed, the "ose" module
      was still specifying -DDLL_IMPORT_OSE.

    - Small chance that when using multithreading, that if cancelling an
      action at the same time as scheduling a new action, that the list
      maintained internally to track active actions could be corrupted.
      Can also occur if a job which has just executed is destroyed at the
      same time as a new one is being scheduled. All this could only occur
      when the scheduling of a new action is being done in a different
      thread to the main dispatcher thread.

    - Allocation of action IDs against cron type actions was incorrect
      meaning that if the previous action was a once off action, the cron
      job would take the same action ID. This mean't that if the cron
      job was cancelled, the prior once off action would be cancelled also
      if it hadn't yet run.

    - Shared library not correctly being rebuilt when same objects as
      go into static library are used in the shared library. Ie., those
      platforms where there is no separate compiler option required to
      build objects to create a shared library.

    - HP aC++ wouldn't compile template code associated with payload
      objects because only forward declaration of type had been defined
      when templates first parsed and not complete declaration.

    - Not quite standard way of initialising ostream base classes was
      being used to workaround fact that old style streams classes with
      some compilers wouldn't work if initialised in the standard way.
      This was working fine until Visual C++ 7.0 came along, where
      although the streams worked, they leaked memory which was a problem
      if you create a large number of instances of the streams. Such a
      thing happens with OTC_OSStream in the implementation of the HTTP
      framework and the payload objects in the messaging system. Code
      now uses standard way of initialising ostream base class if the
      flag is set to say to use ANSI standard C++ iostreams interfaces.
      This may mean though that if using old style streams with Visual
      C++ that it still leaks memory. Depends on whether they preserved
      the old implementation or whether it is a wrapper around the ANSI
      standard C++ implementation.

    - Check against pending idle and standard job queues in dispatcher
      when select() was used were adequately thread protected. This
      may have caused some issues, although not sure what if any as
      jobs would still have got executed anyway.

    - The info2html/class2html scripts were trying to dump the resultant
      file into the root directory instead of the current directory.

    - Not all path names in Mac OS X project builder file were relative
      which mean't it wouldn't work if filesystem structure was different
      which would most likely have been the case.

  + Installation

    - Added experimental "build-release" and "install-release" to top
      level makefile. These allow separate build and install phases so
      that only root needs to be used for the installation if you are
      installing into an area where you wouldn't normally access. These
      targets also use a trick with makeit to build all the source
      direct into one directory. This makes the build and installation
      of the whole of OSE much quicker. Note though that the Tcl, Python
      and Qt libraries aren't able to be separately installed using these
      targets.

  + C++ Class Library

    - The OTC_TManyMap class previously had no guarantee about the order
      in which key/item pairs would be visted by an iterator. Order of
      visitation is now per the sorting criteria with least ordered key/item
      pair first when traversed in the forward direction.

    - When calling listen() on sockets, now use SOMAXCONN if it is defined
      to specify the backlog, rather than fixing it to 5. Still default to
      the value 5 is SOMAXCONN not defined.

    - If the the preprocessor symbol HAVE_WINSOCK2 is defined on the command
      line when compiling on Win32, then WinSock 2 header files will be used
      instead of WinSock 1. One consequence of this is that the backlog
      queue length of the the listen() call will default to the highest
      possible value on platforms such as Windows 2000 Server. Not that you
      will need to link with "ws2_32.lib" instead of "wsock32.lib".

    - The OTC_Dispatcher::initialise() routine when it creates an instance
      of OTC_JobQueue will now automatically perform the initialisation
      startup call for WinSock on Win32. As long as you initialise the
      dispatcher before doing anything requiring the WinSock libraries you
      are fine. The WinSock library will be initialised with the WinSock
      version defined by the "winsock2.h" header file, or version 1.0 if the
      header file doesn't specify it or WinSock 2 was compiled in. Note that
      this change means that you must have at least Windows 98. Windows 95
      can no longer be used.

    - Try to calculate the capacity of string required to encode XML-RPC
      request into when converting NET-RPC to XML-RPC. Avoids unnecessary
      allocations and copying.

    - Added into the OTC_Arena and OTC_Cluster classes the ability to
      find out the amount of memory which has been allocated.

    - When serializing a payload object into a string, ie., the encode()
      method is called with no arguments, the amount of memory allocated
      by the memory cluster the payload is constructed against is used
      as a guide as to how much space to preallocate into the buffer into
      which the payload is encoded. This ensures that the buffer is nearly
      always large enough and that resizing and copying of the buffer
      isn't needed. This is the most beneficial in the messaging system.
      Note though that it can be a little bit wasteful on memory, however,
      such memory buffers are usually short lived, being destroyed when
      the data has been sent over a socket connection or received at the
      destination service in the same process.

    - Various tweaks to how static data is initialised to avoid having
      to do mutex locking for everytime there after that the class is used
      in order to check that static data is used. Typically this involved
      having two levels of checking to determine if data had been set.
      This was done in the OTC_String and OTC_RString classes.

    - When instance of OTC_String is truncated back to zero length, now
      links back to null string internally whereas was creating a
      minimum length string straight away, which would be possibly
      discarded straight away with next string operation if resultant
      string was larger.

    - Preallocate capacity in strings in OTC_Properties when reading in
      of config files to avoid reallocations for normal use cases.

    - Added header file "OTC/thread/atomic.hh". This provides some
      primitives for doing minimal atomic operations on integer values. By
      default relies on existance of thread mutex lock, but where it is
      known how to use low level routines to atomically manipulate integer
      values without locking, does so. Used in the OTC_String and
      OTC_Resource class when manipulating reference counts. Don't use this
      stuff directly as is specific to use within OSE and any locking
      aspect is disabled when thread support isn't built into OSE.

    - Went back to using operating system memmove() option rather than
      our own. In the past our own was generally quicker because the
      memmove() implementation copied one byte at a time. Now memmove()
      looks to be written in assembler on many platforms, eg., Win32,
      and it runs a lot quicker than what we can do, even when copying
      4 bytes at a time.

    - Added clone() to OTC_EVCallback and modified class to use reference
      count internally in the implementation of clone() and destroy().
      Needed because in some uses of this class, may be necessary to clone
      the callback object as a way of declaring a reference to it so it
      is deleted while it is being executed. Can occur where class is used
      as a base class for permanent callback registrations.

    - Now presize input buffers used to decode XML for XML-RPC and NET-RPC
      requests into payload objects. When decoding from a string, the
      calculation of the input buffer is automatic. If decoding from a
      string, a default of aboutn 8K is used. This can be overridden by the
      OTCLIB_PAYLOADINPUT environment variable.

    - Originally OTC_OSStream was buffered but was then made unbuffered so
      that the target string was always in sync. This however is really
      inefficient when formatting lots of data. To improve efficiency, can
      no supply second argument to constructor of OTC_OSStream which is a
      flag to indicate whether buffering should be enabled or not. The
      default is OTCLIB_UNBUFFERED to preserve existing behaviour. The
      value OTCLIB_BUFFERED can also be supplied resulting in a 1K buffer
      being used. This is more efficient, however, you need to ensure that
      you flush the stream to sync the data into the target string.

    - Improved performance of XML encode/decode routines in OTC_HttpSession,
      OTC_ROPayload and OTC_RWPayload. This in some cases can have a quite
      significant impact.

    - Removed ability to define environment variables OTCLIB_TRACEFD
      and OTCLIB_LOGFD. These only worked for old style C++ streams and
      didn't work for ANSI standard C++ streams.

    - Added method to OTC_CommonPool for dumping statistics regarding
      use of memory pool. Sometimes helpful for knowing what your program
      is doing and in calculations for determining how common memory pools
      should be presized.

  + Python Wrappers

    - Added to Agent class the scheduleStartup(), subscribeStartup() and
      unsubscribeStartup() methods. A derived class constructor can
      subscribe to agent startup, with the code which instantiates the
      derived agent triggering it once the agent has been created. To
      activate threading, the activateThreading() method could be registered
      as the startup callback if nothing else needed to be done.

  + Documentation Tools

    - Don't require gawk from Fink package to be available on Mac OS X.
      Instead use "awk" which on the Mac is "gawk" anyway. Just needed
      to know this and modify command line options appropriately.


Changes in OSE Version 7.0pl5
-----------------------------

  + Migration Issues

    - Default way in which Python wrappers are built and installed has
      been changed. Previously, the loadable module for Python would merely
      reference the shared library for OSE which had already been installed
      when OSE was installed. This approach worked fine for nearly all
      platforms, the exceptions being Win32 and Mac OS X. Under Win32 a
      fiddle was required to get the DLLs to work correctly. On Mac OS X
      it is tricky to avoid undefined symbols and when it does build, the
      dynamic loader hangs when the OSE shared library is being linked at
      runtime. This approach also mean't that the Python loadable module was
      not self contained and it was required to install OSE even if you
      only wanted to use the Python wrappers.

      Instead of the old way of doing things, the contents of the python
      subdirectory can now be installed without first having to install
      OSE. What will happen is that all the parts of OSE required by the
      loadable module are built into the loadable module itself. Since an
      installed version of OSE isn't required, to build the Python wrappers
      you should execute:

        cd python
        gnumake install

      If you experience problems when using this method and the old way of
      building the Python wrappers was working, you should after having
      installed OSE, instead execute:

        cd python
        makeit install STANDALONE=NO

      Note that the above two methods result in the Python wrappers for OSE
      being installed within the OSE installation directory heirarchy. If
      you instead want to install the resulting Python loadable module and
      the Python code into the standard Python installation directory,
      instead run:

	cd python
	gnumake python-install

      If you want to install the OSE python wrappers into your personal
      home directory, use:

	cd python
	gnumake python-install PYTHON_HOME=~

      If you want to build a binary distribution of the OSE python wrappers,
      run:

	cd python
	gnumake python-bdist

      The result will be left in the "dist" subdirectory.

      Note that in all the above cases, you need to have at least configured
      OSE first, even if you don't install the whole of OSE.

    - The Python monitorResponse() method of the Service class is being
      deprecated and should no longer be used. Where the monitorResponse
      method was called as:

        self.monitorResponse(self.callback,id)

      or:

        self.monitorResponse(self.callback,id,timeout)

      with the effect being that self.callback was called both for
      a valid response to the request being made as well as in the
      case of a failed request, you should change your code.

      The functionality of this method has been split into two distinct
      methods to allow distinct callbacks for a successful response and
      for a failed response.

      The calls which the above single call should be replaced with are:

        self.processResponse(self.responseCallback,id)
	self.processFailure(self.failureCallback,id,timeout)

      The timeout in the second method is optional. The failure callback
      should accept either none, one or four arguments. For a single
      argument it will be passed the conversation ID of the original
      request. With four arguments, it will be the conversation ID, error
      code, error description, origin and details.

      If you don't call processFailure(), then only the response callback
      will be called and any failure will be ignored.

      Note that in using these two new functions, you gain a new feature
      whereby you will receive a failure notification when you do not get
      a response to a request prior to the target service being withdrawn.

    - The sendRequest() method of the Python service object expected the
      third argument to be a tuple of the arguments to send to the remote
      method. Ie.,

	self.sendRequest(binding,"multiply",(1.2,3.4))

      This has been changed and the values in the tuple should be added
      as trailing arguments to the first two arguments. Ie.,

	self.sendRequest(binding,"multiply",1.2,3.4)

      Normally, this method wouldn't have been called directly and code
      should have been using the smart method dispatching object returned
      by serviceEndPoint() instead. In some circumstances though it is
      useful to call this direct.

      Change was made to make it consistent with future C++ API to services
      which follows closely that of Python wrappers. This had to be changed
      to make it consistent.

    - The OTCEV_Failure class no longer has access to an associated message
      system OTCEV_Envelope instance. Any code relying on being able to
      access the envelope for a failure will need to be changed to rely
      upon only the conversation ID of the request.

  + Bugs Fixed

    - Any trailing space on the end of the OSE_CONFIGURATION value can
      cause inclusion of the host configuration to fail.

    - The Python base64 module throws an exception when the decodestring()
      function is passed an empty string whereas it doesn't when the
      string only contains whitespace. This can cause both XML-RPC and
      NET-RPC clients to unexpectedly fail. This behaviour in the base64
      module only changed in more recent versions of Python.

    - If "makeit" is run from a GNU make makefile where "makeit" wasn't
      being used, LD_RUN_PATH wouldn't be set and exported correctly.
      On some platforms, this resulted in a single object file being
      left out of any shared library which was being created.

    - Lurking Y2K style bug when using %y tag in the OTCLIB_LOGFILE
      environment variable to define the name of the log file such
      that it includes two digit year. The year wasn't being squashed
      to a two digit year when it turned 2000, but was displaying 100.

    - Dotted notation when used to access subelements through payload
      classes, was truncating name components.

    - When removing an item from OTC_HUniqMap where protection is set to
      OTCLIB_UNSAFE, ie., don't generate an exception if the item isn't
      there, code could crash.

    - Newer versions of Python require __ne__ to be defined if wanting
      to override behaviour of operator for "!=". This was causing None
      comparisons against service proxy objects to give wrong result. Note
      that saying "endpoint is not None" is not guaranteed to work for
      this sort of test due to how it is being done.

    - On MAC OS X, if dependencies were generated, you were left with
      strange dependencies on <built-in> and <command line>. Now ensure
      that anything on right hand side of dependency starting with "<"
      is discarded.

    - The scheduleShutdown() method of the Python Agent class should have
      been able to accept a float for the number of seconds before shutdown
      but was limiting caller to using an integer value.

    - Fix possibility of malicious buffer overflow in setting up name of
      log file used by the logging subsystem.

    - Cron jobs implemented by the action event weren't working correctly
      when a day of week was being specified. Result was that when specifying
      a day of week to run, it would be run every day and not just the day
      of week desired.

  + Installation

    - The installation will now attempt to create a symlink to the version
      of GNU make which you are using to install OSE, into the appropriate
      location as expected by makeit. On Win32, if you are using the MKS
      toolkit, you will still have to copy a working version of GNU make
      into the appropriate location.

  + Build Environment

    - Added compiler entry for GNU C++ 3.X compilers.

    - If not specifically defined, now default to expecting Python 2.2 to
      be available.

    - If wanting to build a loadable module, as distinct from a shared
      library, as well as listing "shlib" in "MAKEIT_OPTIONS", you can
      now specify "loadable_module" in "SHLIB_OPTIONS". This will subtly
      change how makeit behaves so as to be more appropriate for the case
      of building a loadable module. Note that on some platforms, such
      as Mac OS X, this is necessary as loadable module have to be built
      in a different way to shared libraries.

      In order to have such a loadable module installed, you should define
      "LIBDIR" to be the location it is to be installed into and "OBJECT"
      to be the basename component of the name which it is to be called
      when installed. Except on Win32 platforms where a ".dll" extension
      is used, all platforms will use a ".so" extension for a loadable
      module. Note that you cannot have a shared library or static library
      installed from the same directory that a loadable module is being
      installed.

    - If you don't want to use makeit on Mac OS X, but instead want to
      use the Project Builder application, you can use the files in
      the "macosx" directory. See the "INSTALL" file in that directory
      for instructions.

    - Added support for Jar files in java module. Support for java is
      still very very poor, but something is almost better than nothing.

  + C++ Class Library

    - The OTCEV_Failure class is no longer bound explicitly to the
      OTCEV_Envelope class. It can still be initialised with one, but it is
      now possible to create instances of OTCEV_Failure without
      OTCEV_Envelope. This is useful within the message system as failure
      events can be generated independent of an actual message system
      event. Does mean that sender is no longer available and it will be
      necessary to remember the conversation ID to track request. This
      change is reflected in the Python wrappers as well.

    - The subscribeServiceAddress method of OTC_SVRegistry now takes an
      optional subscription name. This allows a single agent to be
      subscribed to the same service address with different identifying
      tags.

    - The deprecated template #pragma tags are no longer used for versions
      of GNU C++ from 2.95 onwards. This eliminates a host of warnings, plus
      was necessary to get GNU C++ 3.1 to work on Mac OS 10.2.1 because of
      an internal code generation bug in the compiler.

    - Added to OTC_SVBroker the sendMessage() member function. This allows
      you to send opaque data messages to the target service. That is, you
      can specify the encoded message and describe what its content type
      is. This can be used where it is preferable to not have to translate
      data into the default payload object structure and for it then to be
      converted into XML. Note that such messages are one way only. There
      is no inbuilt concept of being able to send a reply to such a message.
      What is recommended is that you use normal request method to set up
      the target service so that it will accept your message when sent.
      The target service could even delay sending a response to your request
      until it gets your opaque data message.

    - Added OTC_Program::threadingEnabled() as a way of determining if
      support for threading was compiled into the OSE C++ class libraries.

    - Changed OTCEV_Shutdown so it could be used multiple times in the
      situation where the dispatcher might get stopped, then reset and then
      run again.

    - Added copy constructor and assignment operator to the INET and UNIX
      address classes.

    - Changed OTC_InetClient to rebind the address prior to each retry
      to connect because of a failed connection. This is done to cope
      with instances where the FQDN may have been remapped to a new IP
      address in DNS because of some failover scheme or change in DHCP
      address assignment.

  + Python Wrappers

    - The subscribeServiceAddress() method of a service can now take an
      optional subscription name to allow a single service a means to
      subscribe to another services existance more than once, each
      notification going to a distinct callback. If the callback takes
      three arguments, the arguments will be the binding, group and
      status. If the callback takes four arguments, the fourth argument
      will be the new optional subscription name.

    - The callback supplied when creating a timer, alarm or action can
      now take one or zero arguments. Previously it had to take one,
      that being the name associated with the initial registration. If
      the callback takes no arguments, the name will not be supplied to
      the callback.

    - The subscribeServiceAddress() method now returns the service status
      of the service at the time of the call. The underlying C++ method
      was providing this but it wasn't being passed back.

    - Added to Service new methods processResponse() and processFailure().
      These provide for separate callbacks to handle success and failure,
      whereas previously one callback was used to handle both success
      and failure. When processFailure() is used, an error response is
      also able to be generated when it is detected that the service
      being called is withdrawn before a response is received. Also see
      section on migration issues and prior uses of monitorResponse() as
      it should be changed.

    - Make sendMessage() functionality of OTC_SVBroker usable through the
      Python Service class. A service has to either register interest in
      a message coming from a sender with a specific message ID or define
      a derived version of unexpectedMessage() to cope with all messages.

    - When subscribing to reports generated by a service, instead of the
      service name, which might match many service instances, can now also
      supply a service binding object to allow subscription to that specific
      service agent.

    - How arguments are passed into sendRequest() method were changed,
      namely values in the tuple supplied as third argument should now
      be strung out as normal arguments from third position onwards.
      See the migration issues section above for more details.

    - Added suspendResponse() and resumeResponse(). These act as a layer
      over delayResponse() and allow the registration of a callback against
      the conversation ID, when the response is later resumed using the
      conversation ID, the callback previously registered is called. The
      callback can have zero or one argument. If it has one argument it
      will be passed the conversation ID of the original call.

    - Added cancelResponse() and cancelAllResponses(). These provide a way
      of aborting a delayed response without actually resuming it first.

    - Added cancelRequest() and cancelAllRequests() so that client can
      abort its own active requests in such a way as that it appeared a
      remote error had occurred.

    - Methods currentTimeout() and timeoutOccurred() have been removed.
      The implementation of these hadn't actually been finished and they
      aren't particularly useful.

    - Added serviceAudience() and serviceAddress() methods to Service.

    - Added sendResponse() and sendFailure() methods to Service to be
      consistent with future C++ interface. These in turn call the
      sendResponse() or sendFailure() method on the request object passed
      as first argument with parameters as appropriate.

      One should actually use these methods instead of calling the methods
      direct on the request object. This will ensure that any special
      processing which may need to be done at the completion of a request
      can be carried out if such processing is added at some later time
      to the Service implementation.

    - Added timerPending() and alarmPending() to Agent class for determining
      if timer or alarm using a particular name is still pending.

    - Added responsePending() to Service class for determining if a
      an expected response was still pending. This will only work if the
      actual response was being monitored using processResponse() or
      processFailure().

    - Added returnResponse() for sending response to current request and
      immediately ending the request. Ie., the method doesn't return. Has
      same effect as doing normal return in top level request method.
      Could feasibly be called in method called by request method.

    - Names of a number of error constants defined in "netrpc" module
      have been changed:

	CLIENT_SERVER_ADDRESS_INVALID -> CLIENT_SERVICE_ADDRESS_INVALID
        CLIENT_SERVER_UNAVAILABLE -> CLIENT_SERVICE_UNAVAILABLE

      Old names kept for backward compatibility but may be removed in a
      future version. Corresponding error messages have also been changed.

    - Removed all cases of __del__ method in Agent, Monitor, Service and
      and Servlets. The methods weren't actually required and could cause
      misundestandings.

    - Added threadingEnabled() to Program class. This indicates if the
      underlying C++ class library was compiled with threading support.
      If threading isn't enabled in the uderlying C++ class library,
      you should use Python threads in a way that multiple threads can
      call into OSE at different times.

    - Providing an id as final argument to startTimer(), setAlarm() and
      scheduleAction() is no longer required. If not supplied an id is
      internally generated. Whether or not the id is supplied, the id is
      returned from the functions. Having an id automatically created is
      good where you don't need to be able to stop the event from later
      occuring or you don't need to replace it.

    - Added acquireObject() and releaseObject() to Agent class. This can
      be used in a separate thread on instances of Agent, Monitor or Service
      to lock out the dispatcher thread such that the object can be safely
      used. This should be used from GUI thread when getting data to update
      windows.

      Note that also added synchronisedObject() which returns a handle for
      the Agent, Monitor or Service instance and can be called like a normal
      object. The difference is that the acquireObject() and releaseObject()
      methods will be called around the point where the actual call is
      made to the real object. Ie., dispatcher thread is automatically
      locked out.

      You still need to be a bit careful when using sychronisedObject() as
      it only blocks the dispatcher for that single call. If you need to
      ensure dispatcher thread is blocked across a number of calls, use
      the base synchronisation functions above. It is quite safe to use
      the base synchronisation functions on an object returned by the
      sychronisedObject() method.

      Note that the names of these new methods may be change around a bit
      so be prepared to make changes in the future if you start using them.

    - When using LocalService class, acquireObject() and releaseObject()
      are used to ensure that dispatcher thread is blocked out for the
      period of the call. Note that LocalService might eventually get
      removed, so try not to use it.

    - Added activateThreading() to Agent class. This can be used in Agent,
      Monitor or Service and introduces an independent thread specific to
      that object in which all event callbacks from the underlying event
      dispatcher are handled. That is, the event will not be handled within
      the context of the event dispatcher thread, but a unique thread
      attached to the Agent object or derived object. One has to be very
      careful about where one calls this, especially if the object is
      being created in a separate thread to that of the event dispatcher.
      It is preferable to have this method be called in a callback from
      within the actual event system.

      Note that this method has no effect if the underlying C++ class
      library was not compiled with thread support built in.

    - The cancelAllTimers() method now takes an optional glob style
      pattern which if supplied will be matched against all active timers
      and any which match will be cancelled.

    - When using Exchange class to setup a connection to a server exchange,
      the default retry delay is now 5 seconds whereas before it defaulted
      to only attempting the connection once. Typically this would always
      have been overridden so a default greater than zero is better.


Changes in OSE Version 7.0pl4
-----------------------------

  + Bugs Fixed

    - Backward compatability feature for LOADLIBES, ie., very very old,
      was causing problems with correct operation of PROJECT_LDLIBS and
      possibly other variables in makeit. Backwards compatability feature
      commented out.

    - An empty <struct></struct> pair in XML-RPC request handled by C++
      implementation of XML-RPC gateway would cause internal exception.

    - The base64 decoding algorithm of the C++ implementation of the
      XML-RPC gateway wasn't handling data which was broken across
      separate lines.

  + Build Environment

    - Added ability to install OSE into a directory different to where
      you eventually intend to use it. To use this defined OSE_BUILD_ROOT
      on the command line when installing OSE. Ie.,

        gmake install OSE_BUILD_ROOT=/some/dir

      The value of OSE_ROOT_DIRECTORY as defined in the host config file,
      or the default of /usr/local/ose will still be the path encoded into
      scripts. Eventually the installation tree would need to be moved
      to this later path to use OSE properly.

    - Added support for building shared libraries on MACOSX. Note that
      shared libraries are not the same as loadable modules. Makeit
      would need to be extended in some way to handle the latter, which
      will need to be done in order for the Python wrappers to be
      installable on MACOSX.

  + C++ Class Library

    - Added into OTC_SVBroker the ability to subscribe to a specific
      service agent using its service binding object. Previously you
      could only subscribe based on service name which could match more
      than one service agent instance.

  + Python Wrappers

    - If the Python wrapper libraries aren't installed, doing an install
      in the "python" directory will still result in the Python modules
      being installed so that the client side "netrpc" libraries are
      accessible.


Changes in OSE Version 7.0pl3
-----------------------------

  + Migration Issues

    - The threshold argument of a Python HTTP servlet object congestion
      monitoring callback will need to be dropped as the threshold
      value is no longer supplied. If not dropped the Python script
      will incur a runtime error due to mismatch in function argument
      count.

  + Bugs Fixed

    - The OTC_VecPtr was not supplying size of array when allocating
      using ObjectStore specific operator new().

    - The OTC_HIndexEntry class was hiding get_os_typespec() during
      ObjectStore schema generation when it shouldn't have.

    - There were various templates missing from the ObjectStore schema
      file.

    - The test harness for the program configuration database hadn't
      been updated when the format of the configuration database file
      had changed.

    - If for some reason one wanted to perform cross compilation to
      the Win32 platform, eg, OSE_HOST set to X86_CYGWIN32 and OSE_TARGET
      set to X86_WIN32, the wrong naming convention for dynamically
      loaded Python module would be used. Namely, that native Win32
      Python requires "_ose.dll", where as Cygwin Python program use
      "_osemodule.dll".

    - The monitorReports() and acceptReports() member functions of the
      Python Service class, weren't replacing an existing callback
      registration using the same subject pattern, but leaving it as
      it was.

    - In OTC_EVThreadPool, the event queue object was not being deleted
      in the destructor, resulting in a memory leak.

    - When using the RPC over HTTP interfaces, ie, NET-RPC, XML-RPC or
      SOAP. If the service to which a remote call had been made was
      withdrawn before a response was received, the HTTP servlet handling
      the call would wait indefinitely for a response which would never
      come. Such a situation can occur if the process the service in
      was remote to the HTTP servlet and the process died, or if an
      intermediate exchange server died. The code will no detect the
      withdrawal of the service and return an "Application Error" to the
      remote client which made the call.

  + Build Environment

    - ObjectStore 6.0 doesn't have os_postlink. Make sure we check
      for presence of program before trying to run it.

    - When using GNU C++ compilers in standard template mode, ie., not
      the old -fexternal-templates mode, can still explicitly perform
      template closure on library.

  + C++ Library

    - Various templates missing in manual template expansion for closure
      when ObjectStore is being used.

    - ObjectStore uses operator new[]() syntax when defining overloaded
      new if the compiler supports it. Need to follow same convention
      as what ObjectStore does else code will not compile.

    - ObjectStore 6.0 no longer provides os_object_cluster. The class
      OTC_Locality has been modified to always store the actual object
      and to use the os_cluster_with mechanism when allocating memory.
      In OTC_MPObject, the os_object_cluster override of operator new() has
      been replaced with os_cluster and os_cluster_with overloads.

    - ObjectStore 6.0 uses different macros for marking template classes
      in schema file. Extra bracketing also needs to be removed from old
      macro for normal types.

    - Force backlog events whenever socket gets blocked in OTC_InetClient
      and related classes. This ensures that a backlog event with 0 pending
      messages gets generated when the queue of messages gets sent after
      any blocking on the socket and not just when the queue length
      threshold is reached.

    - Deleted the threshold value out of OTCEV_Congestion as it had
      questionable value in actually indicating anything of meaning.
      The number of pending messages are still indicated, except for
      knowing when it returns to zero, it is more for the purposes of
      debugging.

      Note that the place this will most likely cause problems is if
      you had supplied a Python method to monitor congestion in a
      Python HTTP servlet object. In this situation you will need to
      drop the congestion argument from your callback.

    - Added OTC_PLReader::operator>>=(OTC_Symbol&) to allow reading
      of payload value into a symbol.

    - Added OTC_RWPayload::operator<<=(OTC_Symbol const&) to allow
      symbols to be put into a payload. Values are writen as normal
      strings.

    - Added the methods OTC_PLReader::operator>>=(OTC_Iterator<T>&)
      and OTC_PLReader::operator>>=(OTC_PairIterator<OTC_String,T>&)
      so that arrays can be read into an iterator directly and an
      index direct into a pair iterator. For the pair iterator, if
      there are duplicate keys, decoding doesn't fail as when using
      a map.

    - Added static method deliverImmediately() to OTCEV_Startup and
      OTCEV_Shutdown as a quick meands of creating and delivering these
      events.

    - If there were trailing spaces or tabs on the last line of the value
      corresponding to a configuration database entry maintained using the
      OTC_Properties class, they weren't being removed. This was leading
      to non obvious problems where whitespace wasn't expected, but the
      behaviour did mirror the X resource database model which the code
      was originally intended to follow. That the spaces and tabs weren't
      being removed is now being seen as more trouble than good so they
      are now removed. That it did what it did might even be seen as
      a bug. Note though that only spaces and tabs are removed. If an entry
      explicitly included line continuations in order to get a newline in
      the value, any trailing newlines will not be removed.

  + Python Wrappers

    - Added conversationId() to Service class. This allows you to get
      the current conversation ID without having to check for yourself
      if a request, response or failure is being handled.

  + Documentation Tools

    - Added -output option to class2info, info2man, info2html and info2mml
      programs so that generated files could be output into a directory
      other than the current directory.


Changes in OSE Version 7.0pl2
-----------------------------

  + Bugs Fixed

    - No longer quote utf-8 when outputing it as encoding along with
      content type in SOAP client request. The quotes were giving at
      least one SOAP service a problem.

    - Provide workaround for Cygwin when displaying via the logger the
      date/time for a HTTP request. The strftime() function of Cygwin
      wasn't displaying correctly formatted time using traditional
      formatting flags. Use some which do work, but necessitated fixing
      date/time to GMT rather than timezone of the machine.

    - Provide workaround for Cygwin when closing off sockets managed
      by OTC_InetServer class. When used in HTTP server, even though
      the socket was closed, the HTTP client was hanging on an open
      connection. Fix was to explicitly call ::shutdown() on the socket
      before calling ::close(). Note that client side sockets might
      be similarly affected but no workaround has been supplied in
      that case.

  + Python Wrappers

    - Added framework within "netrpc" module for handling RPC over HTTP
      requests via CGI. The framework is simple and merely hands off
      control to a function you provide where the arguments are the name of
      the method and the parameters. It is up to you to resolve that to an
      actual method. The name of the method to call is "asCGI()" and
      versions can be found in "netrpc", "netrpc.soap" and "netrpc.xmlrpc"
      modules as appropriate for the protocol you wish to use. To generate
      specific error responses, raise a netrpc.ServiceFailure exception.

    - Ability to specify SOAP method namespace URI can also now be done
      when making actual call by specifying "ns" keyword argument.

    - Added ability within netrpc.soap.RemoteService to override what
      the SOAPAction header is set to. This can be supplied as a keyword
      argument when initialising class or when making the actual call.
      The argument is "soapaction".


Changes in OSE Version 7.0pl1
-----------------------------

  + Bugs Fixed

    - Makefile for building Python code under native Win32 was looking
      for one file in the wrong directory.

    - Format tag for timezone when outputing date/time of HTTP request
      got set to "%z" instead of "%Z". Typo probably resulted in changed
      case.

    - The scheduleCronAction member function was present in the internal
      C++ Python Agent class proxy but not in the C++ Python Service class
      proxy. This mean't cron based actions could be scheduled if Python
      Agent class was used, but not if Python Service class used.

    - Extraneous ifeq in X86_SOLARIS host config file.

    - Need to add in -lC when creating shared libraries with Sun C++ 4.X
      compilers else dynamically loaded objects, such as that imported
      into Python, will have undefined symbols. Similarly for Sun C++ 5.X
      compilers, need to add -lCstd -lCrun. These changes have been made
      to SPARC_SOLARIS host config file but not X86_SOLARIS as can't
      test for that platform.

    - If using Python 1.5 on Solaris, "thread.h" in system includes
      clashes with that in Python header files, the latter being included
      instead when it shouldn't. When it is detected that this can occur
      Python module will now forcibly put system header files include
      directory before Python include files.

    - FreeBSD defines socklen_t so shouldn't be defining our own typedef
      for it in inetaddr.hh and unixaddr.hh.

    - Binary mode wasn't used when opening file with OTC_FileServlet. As
      a result on Win32 platforms CRLF translations were occuring and input
      reading would be stopped when CTRL-Z was encountered.

    - No encoder specified for Unicode strings so SOAP gateway wouldn't
      always work with strings when passed up as Unicode.

    - Interoperability between SOAP gateway and some SOAP clients was
      broken. The SOAP client in OSE and those based on Python ZSI client
      worked fine, but Python SOAP.py and Perl base SOAP::List clients
      had stopped working. There was also a problem if SOAP client based
      on ZSI as supplied in OSE was used against other SOAP server
      implementations. This latter problem also exists in SOAP client
      supplied in ZSI itself and should be fixed in 1.2-RC6 of that
      package or 1.2 (final).

    - SOAP gateway based on SOAP.py was broken altogether or suffered
      interop problems with non SOAP.py clients. Although no longer
      default implementation used, still fixed.

    - Errors generated by RemoteService in netrpc.xmlrpc were given an
      origin of "netsvc.xmlrpc" instead of "netrpc.xmlrpc".

  + Build Environment

    - Updated compiler configurations for various platforms. Also added
      support for ALPHA_LINUX, RS6000_LINUX, SPARC_LINUX and POWER_MACOSX.

    - Support for build shared libraries when using Cygwin toolkit on
      Win32 platforms. This works sufficiently to build Python wrappers
      as DLL for Python under Cygwin.

  + Python Wrappers

    - Allow namespace URI to be specified when using SOAP RemoteService
      object. The ability to set this is necessary when talking to Perl
      SOAP::Lite based servers and possibly other SOAP servers as well.
      The keyword attribute to use when creating RemoteService instance
      is "ns".


Changes in OSE Version 7.0
--------------------------

  + Bugs Fixed

    - SOAP gateway using module called "SOAP" from "pywebsvcs" still
      included debug and also called wrong method in custom decode/encode
      routines, causing a remote call to always fail. Problems fixed,
      but this is no longer the default as implementation based on the
      "ZSI" package from "pywebsvcs" is the default instead.

    - The OTC_String get() and getline() functions do not take into
      consideration the change of behaviour dictated by the ANSI C++
      standard to the istream::get() function. Namely, when using get(), if
      the next character was the delimiter, the stream fail bit would
      be set, according to the ANSI C++ standard. This wasn't previously
      the case.
 
      This mean't that using OTC_String to read in a line when the line
      was empty would result in the fail bit being set when the ANSI C++
      standard behaviour was implemented. It was also possible for reading
      of a line to errornously set the fail bit when the length of the line
      was the same as the available capacity. These issues in turn affected
      code such as found in the program configuration database which wasn't
      explicitly checking for the fail bit being set.

      It is felt that the behaviour whereby the fail bit isn't set is more
      appropriate in the context of the OTC_String class and in general is
      more sensible behaviour. There is also the issue that any code using
      OTC_String would break if relying on the previous behaviour. As a
      consequence, the OTC_String class will accomodate internally the ANSI
      C++ standard, but hide it from users of the OTC_String class by
      ensuring that the fail bit isn't set when the next character is the
      delimiter.

  + C++ Library

    - Added explicit checks in string class such that stream operations
      would bail out before doing anything if stream was not in a good
      state. In general this probably wasn't required because of how the
      methods were implemented, but done just in case.

    - Changed buffer block size increment when doing stream reads into a
      an instance of the string class. The size being used was causing it
      to increase too quick and loosing benefit of common memory pool when
      it was being used. Best use of the available capacity was also not
      being used when reading from stream in that last character in the
      available space wasn't always being used.

  + Python Wrappers

    - Added SOAP client to "netrpc" package. This has equivalent interface
      to NET-RPC and XML-RPC protocol interfaces except that user defined
      encoder/decoder routines have no relevance. The SOAP client is
      accessible by using RemoteService class in "netrpc.soap" module. This
      module is dependent on you separately installing the "ZSI" package
      from "http://pywebsvcs.sourceforge.net".

      Note that this SOAP client is only really useable with web services
      which use only positional arguments. Most web services use WSDL and
      named paramaters and thus can't be used with this client. The client
      can however be used against the SOAP gateway in this package, as well
      as the "ZSI/dispatch.py" server in the ZSI package.

    - Added alternate SOAP gateway using the "ZSI" package from "pywebsvcs".
      This is actually now the default as it works better than the "SOAP"
      module from "pywebsvcs". You must have installed the "ZSI" package
      separately.


Changes in OSE Version 7.0b9
----------------------------

  + News

    - The XML-RPC gateway has been merged back into the main OSE package.
      The client side module for making XML-RPC requests is still provided
      and is accessible as "netrpc.xmlrpc". On the server side, both Python
      and C++ implementations of the XML-RPC protocol marshalling code are
      provided. Also, it is possible to make use of third party protocol
      marshalling code as well if you don't want to use that provided. The
      third party packages supported are the "xmlrpclib" module from
      PythonWare at:

        http://www.pythonware.com
      
      and the "py-xmlrpc" module available from:

	http://sourceforge.net/projects/py-xmlrpc
      
      The PythonWare module is pure Python, but is going to be included in
      future versions of Python by default. The "py-xmlrpc" module has a C
      code component making it quicker than the pure Python versions and
      probably comparable with the C++ implementation provided. The
      respective web sites for the third party packages are:

      By default the Python implementation for encoding and decoding XML-RPC
      messages provided with OSE is used. This can be changed through a
      keyword argument to the C++ implementation either of the other two
      implementations if they are available.

    - The SOAP gateway has been merged into the main OSE package. You will
      still need to have separately installed "SOAP.py" from the "pywebsvcs"
      package available from:

        http://sourceforge.net/projects/pywebsvcs

      It is also possible to use the "soaplib" module from PythonWare at:

        http://www.pythonware.com

      however, this implementation is very incomplete and can only really
      interoperate with itself.

  + Migration Issues

    - The servlet() member function of OTC_HttpServer has been changed and
      now only takes a single HTTP session object as argument. The server
      and servlet path information have been pushed into the HTTP session
      object. Similarly with the Python interface. All derived HttpServer
      objects will need to be changed to accomodate the prototype change.

    - The OTC_FileServer class now requires that filename extensions
      passed to map() member function include a leading ".".

    - When a pathname is resolved by the HTTP session object, ie.,
      instances of "." and ".." removed as well as duplicate instances
      of "/", any trailing slash is left on the path. This is so it
      can be determined if a directory access was intended. This is
      important as in file based serving, may be necessary to redirect
      request with "/" appended if it wasn't present.

    - The serverRoot passed through to HTTP server objects will now
      be a valid URL, ie., will have "http://" etc prepended. The URL
      will never have a trailing slash. The value as it used to be is
      now available as serverPath. Note that these are now actually
      part of the session object and not passed as separate arguments.

    - The properties database implemented by OTC_Properties and used by
      the OTC_Program class for the configuration database has had its
      wildcard matching changed. Previously it just used OTC_Globex for
      matching but this proved to be less than ideal since it was trying
      to emulate X resource database conventions but failing badly. 
      
      A dedicated wildcard matching algorithm is now used that only uses
      "*" and which only allows "*" to match a single component of a name.
      Ie., now mandated that names must now use "." to separate components.
      Where previously you could say "a*b", now you can't. Names can
      however use the form "a.*.c".

    - When explicitly sending a report to a particular service agent, that
      service agent must still be subscribed to the service agent sending
      the report. Previously you could send a report to any service agent
      at all.

  + Bugs Fixed

    - The default implementation of OTC_HashActions will not compile
      on SGI C++ where the size of a pointer can be 64 bits. To cope with
      this a template specialisation is provided for pointer types which
      casts to int through size_t. At the moment this is only enabled
      when (_MIPS_SZPTR==64) is true as older compilers cannot handle
      template specialisations.

    - Python FileServlet class wouldn't accept None for file type.
      This is to indicate no file type should be sent in response.

    - Non zero test on LocalService to determine if service was
      available was accessing non existant member variable where
      as it should have been accessing central list of services.

    - The template class OTC_DequeHI wasn't using <T> qualifier when
      refering to class name in constructor. This wouldn't compile
      on AIX xlC++ without it.

    - If empty log channel was defined, it wasn't being logged at all.
      This was affecting the trace output when it was logged.

    - When an anonymous service agent added itself to a group, its
      group announcement was being rejected by message exchange in
      first connected remote process and not subsequently propogated.

    - The optimiser (ie., -O) on GNU C/C++ 2.96/3.0/3.1 has a bug
      which results in opt variant of string class to crash on x86
      architecture. Code has been slightly tweaked to avoid the problem.

    - Include a workaround so that only signals received by the thread
      running the dispatcher when using Linux are taken notice of. This
      is needed because the signal handler is called once for each
      active thread, contrary to what a POSIX threads implementation is
      mean't to do.

    - Creation of service registry was done inside same lock as used
      by the service broker, with the lock not being recursive. Thus the
      service broker dead locked on itself. This made service agent
      framework useless when thread support was compiled into OSE.

    - When user authorisation was failing in the HTTP servlet framework,
      the "WWW-Authenticate" header wasn't being returned to indicate
      what authorisation scheme was being used. Note that authentication
      realms aren't yet supported.

  + Build Environment

    - Changed way that GNU C++ 2.95/96 handle templates. Now expands
      templates inline.

    - IBM XL C++ compiler configuration updated to use compiler to build
      library. Also include steps for shared libraries but not enabled
      as not confirmed that it works.

  + C++ Library

    - Made member functions of OTC_HttpSession related to sending
      responses protected so they can't be called from derived version
      of OTC_HttpServer.

    - In OTC_HttpSession, when resolving the path to eliminate duplicate
      instances of "/" and "." and ".." references, any trailing slash
      is no longer removed.

    - The url returnen by url() in OTC_HttpSession, OTC_HttpServlet
      and equivalent Python wrappers now always includes "http://"
      prefix and host and port information if, even if not supplied
      in original request.

    - Added processIdentity() to OTC_Program. This returns a string
      comprising the hostname and process ID.

    - Added serviceAgents() and serviceGroups() member functions to the
      service registry. Methods also exposed in Python API.

    - When loading and merging config using OTC_Program, now possible
      to specify a log channel for error messages.

    - The subject pattern which matched when a report was sent to a
      particular service agent is now included with the report. The
      pattern will be empty (undefined) string if it was an unexpected
      report generted by sendReport().

    - Added logging of HTTP requests. By default this is turned off
      but can be enabled by setting the environment variable called
      OTCLIB_HTTPLOGCHANNEL to a string identifying the log channel to log
      to. Setting this to an empty string will have output go to standard
      log channel. Using a log channel not starting with an alphanumeric
      will hide logged information, but it can be intercepted with user
      defined logging. The format of the logged information is the same as
      original NCSA and CERN servers except that the date/time format is
      different. The date/time format and logged message is the same as
      that generated by Python HTTP server module.

  + Python Wrappers

    - Python modules load a lot quicker at startup. Some modules are
      now only loaded when required, especially those which can take
      a while to load.

    - The sendResponse() and sendError() member functions of the
      HttpServlet class can now be given None as the second argument.
      If this occurs, the default message associated with the HTTP
      response code will be used.

    - If an exception occurs in HttpServer servlet selection, the
      exception is caught and logged, but instead of terminating the
      application, a 500 internal server error is returned to remote
      HTTP client.

    - If an exception occurs in HttpServlet request or content processing,
      the exception is caught and logged, but instead of terminating the
      application, only the servlet is shutdown and client connection
      dropped.

    - Added ErrorServlet class. This provides a quick way of returning
      an error reponse if servlet selection inside a customer HttpServer
      instance can't map a servlet path to a relevant servlet.

    - Added RedirectServlet class and RedirectServer class. The latter
      can be attached to a specific URL namespace managed by the HTTP
      daemon object and all requests will be redirected.

    - Added FormServlet class. This was previously provided as an example
      in the demos directories, but has been added into core module now.
      The processForm() method has however been renamed to handleRequest()
      and the form is maintained internally.

    - The session object passed to servlet() of HttpServer now provides
      access to details related to the request which might be used prior
      to any servlet being created.

    - Python FileServer wrapper around C++ implementation replaced with
      Python implementation having more features. This implementation uses
      Python mimetypes module to determine file types. Allows you to define
      index files to be used when queries made against directories.
      Servlet factory plugins can also be registered for different file
      extensions to allow special processing.

    - Added buffering into HttpServlet such that content will not be
      written out in small bits, but accumulated and sent in larger
      blocks. This avoids lots of little message events being send by
      the event system.

    - Added Python Program class to interface to aspects of OTC_Program
      class from C++ class library. Note that it isn't necessary to
      create an instance of the Program class, as all the methods it
      provides are also placed into netsvc module itself.

    - When an exception occurs in OSE, the details of the exception will
      be automatically displayed using the logger. Previously, it would
      have required the setting of the OTCLIB_LOGEXCEPTIONS environment
      variable. The only time this might cause problems is if your were
      loading your own C++ modules into Python which use OSE and you
      catch those exceptions. Even though you catch the exceptions, the
      details of the exception will still be displayed. At present though,
      it is felt that it is better to enable it by default.

    - The Python wrappers are no longer dependent on Tcl. Instead the
      normal OSE dispatcher is used. The threading problems in the C++
      code associated with the Python wrappers have also been fixed. If you
      want to run Tkinter in same application, the OSE dispatcher should be
      run in a separate thread. Do note however, that a proper review of
      the need to add thread locks in the Python wrappers themselves hasn't
      been done yet so don't expect it to work perfectly just yet if you
      are intertwining the two. Best to use some sort of separate queueing
      mechanism to communicate between the Tkinter code and OSE code.
      The "spyon" GUI mostly works, but doesn't use any queueing mechanism
      so does crash in some circumstances.


Changes in OSE Version 7.0b8
----------------------------

  + Migration Issues

    - When calling a service endpoint object, any method calls which
      matched methods in a service binding object are no longer rerouted to
      the service binding object. If you want information about the
      service agent used, use the service registry to get the service
      binding object and initialise the service endpoint object with
      the service binding object.

    - In OTC_InetListener and OTC_HttpDaemon when authorising a client,
      the client host address is now an IP address and not a fully
      qualified domain name. Having a FQDN would cause long timeouts
      when on a Windows box with no DNS. An IP address and not a FQDN
      also now appears in transport information related to socket
      connections.

  + Bugs Fixed

    - Had spelling of "invalidMethod()" wrong in one place of Python
      service agent. Service agent wouldn't have returned invalid
      method failure response in this case.

    - Some test harness programs wouldn't compile on CYGWIN because use
      of UNIX domain socket classes no disabled.

    - Some test harness programs were still calling set_new_handler(),
      which can crash on Win32 with Visual C++.

    - When using operator>>() on an instance of OTC_String or the
      readToken() member function of OTC_String, if the istream being used
      was actually a istrstream, and the memory referred to the stream was
      a string literal, and string literals are set read only, the
      application could crash. This is because these functions were doing a
      putback onto the stream which with Visual C++ at least, causes an
      access violation. The implementation has now been changed to avoid
      use of putback on a stream. Behaviour with respect to stream states
      after an operation should be the same.

    - Python demo programs were using "posix" module instead of "os"
      which mean't they wouldn't run on Win32.

    - Under Cygwin, makeit wouldn't traverse into subdirectories if the
      original OSE installation root was defined using a DOS style drive
      specification. Ie., "c:/ose". This is because GNU make would think
      that the location of itself was relative and add current directory
      name in front. The MAKE variable is now set explicitly in makeit
      wrapper scripts to avoid this problem.

  + Installation

    - Added native makefile for Microsoft C++ for building DLL suitable
      for Python on Win32 platform. See "win32/INSTALL.MS-PYTHON" for
      instructions. It is also possible to build DLL suitable for Python
      under Win32 using Cygwin toolkit and Microsoft C++ compiler using
      the normal build environment.

  + C++ Library

    - Removed release date preprocessor variable as more likely to forget
      to set it and don't need it now for what was in mind.

    - Added pragmas to disable a bunch of warning messages when using the
      Microsoft C++ compiler.

  + Python Wrappers

    - The netsvc module is now installed into a directory so that associated
      modules can be placed into the same directory. Ie., SOAP and XML-RPC
      modules. The "netsvc" and "netrpc" modules will be used in the same
      way as they were before, but the XML-RPC gateway module will now be
      referred to as "netsvc.xmlrpc" and the SOAP gateway module will now be
      referred to as "netsvc.soap". The XML-RPC client module will now be
      referred to as "xmlrpc". Note that all the XML-RPC and SOAP modules
      are available as separate packages and are not included in the code
      OSE package.

    - The value of origin for any error generated by the netrpc module is
      now "netrpc" instead of "netrpc:client". Similarly, the value of
      origin for any error generated by the netsvc module is now "netsvc"
      instead of "netsvc:client" and "netsvc:service". The distinction was
      confusing and not necessarily helpful.

    - The code which was in the Python wrappers to try and deal with
      threading issues has been removed for the time being. This was
      originally put in to try and get the wrappers working with the
      _tkinter module when threading was supported. It was determined
      that such a thing wasn't possible however as the locks within
      the _tkinter module for Tcl/Tk aren't accessible.
      
      The problem now is that the threading support put in doesn't actually
      work and will cause problems when a thread capable version of Python
      is used. As a result, the thread code has been removed for now,
      pending it being fixed at some time in the future. This isn't seen as
      a big deal at this time as threading when the OSE stuff was being
      used was very dubious in other respects anyway.

      The result is that you still can use the OSE stuff in a thread
      capable version of Python, but if you create your own threads and
      they interact in any way with OSE, then expect trouble.


Changes in OSE Version 7.0b7
----------------------------

  + News

    - An XML-RPC gateway for OSE is now being made available as a separate
      package called "ose-xmlrpc". This is available from the OSE web site.
      The gateway is dependent on the Python interface of OSE. If you are
      using C++ only, you would have to build the Python interface of OSE
      and have a separate processes connected in via the OSE messaging
      framework for the gateway to work.

    - A SOAP gateway for OSE is also now being made available as a separate
      package called "ose-soap". This is available from the OSE web site.
      The gateway is dependent on the Python interface of OSE. If you are
      using C++ only, you would have to build the Python interface of OSE
      and have a separate processes connected in via the OSE messaging
      framework for the gateway to work. Note that there are issues still
      to be resolved with the SOAP module due to inadequacies of the third
      party Python SOAP module being used and shortcomings of the SOAP
      protocol itself.

  + Migration Issues

    - The transactionId() member function in OTCEV_Envelope has been
      changed to conversationId(). A version of transactionId() is NOT
      maintained for backwards compatibility so you will need to change
      your code if you were using it. The prior name was misleading and
      might be confused if a proper transaction mechanism is added latter.
      The automatically generated ID has also changed to use $ID prefix
      instead of $TX prefix. Note that there were similar functions in
      the request, response and failure classes, these also have been
      changed.

    - If using monitorResponse() in Python Service class, it must be
      called for the request of interest, before any other further request
      is initiated. Previously it didn't matter, but now it does.

    - The service payload element names have been changed. "value" is
      now "scalar" and "struct" is now "index". The type names have also be
      qualified with "xsd:" to signify they conform with XML Schema
      Datatype specification. The only exception to this is that "complex"
      in Python is "python:complex". These changes are reflected in the C++
      payload classes and the NET-RPC protocol. If using the higher level
      interfaces, this shouldn't affect you. The only exception might be if
      in C++ interface you are currently setting the type explicitly to
      "base64Binary". Now you will need to use the type "xsd:base64Binary".

    - In OTC_HttpServlet, when processRequest() is called, the content()
      method can no longer be used to retrieve the full content when a
      content length has been defined. Whether or not a content length
      exists, a derived class must override processContent() and accumulate
      any content itself and make its own decision as to when it is all
      available. The same applies for Python wrapper for HTTP servlet.

    - Changed the order of constructor arguments for OTC_EchoServlet to
      match general order of other servlets.

    - The methodName() member function of OTCEV_Response and OTCEV_Failure
      has been removed. It is expected that the transaction ID alone should
      be used to match a response or failure to a request. Removal of this
      allows underlying message formats to be simpler.

  + Bugs fixed

    - The "demos/service/rpc-gateway.py" example program was broken.
      It has also been renamed to "netrpc-gateway.py".

    - Weren't always encoding xml characters in netrpc module when
      forming request. This mean't it was possible using Opaque
      type to insert characters which would make request malformed.

    - In Python Service class, sendReport() would fail because code
      was using wrong argument variable name.

    - When building an index with the C++ service payload classes
      from a PairIterator, if the key included a ".", a subhiearchy
      was being created when it shouldn't have been. Also, a null
      couldn't occur in the key but it can now.

    - In the HTTP servlet framework, when HTTP client permaturely closed
      connection, the HTTP session object would be deleted, but the servlet
      managing the request wasn't. It was possible in such situations that
      the program could crash if the servlet subsequently tried to access
      the HTTP session object. This was mainly an issue in Python as a
      Python reference could hold the servlet active. Mechanism now in
      place such that HTTP session object is only deleted when servlet no
      longer requires it.

    - Fixed compilation problems with Visual C++. Was also missing some
      objects from Win32 makefiles.

    - If LD_RUN_PATH was extended in not leaf directories as well as leaf
      directories in a multilevel build, when a sub make occurred in a sub
      directory, the LD_RUN_PATH would get extended with the same
      information. Ie., it would keep growing in length with each level
      of sub make. Either the duplicates or the length of the value held
      was causing Sun 5.2 (Forte) compilers to die. A fiddle is now done
      so this doesn't occur. It does rely however on LD_RUN_PATH never
      being extended before makeit/init.mk is included. If it is, the same
      problem might still occur.

  + Build Environment

    - Added knowledge of flex into lex.mk module file. The module will
      look for flex in /usr/bin and default to it if it exists and LEX
      variable hadn't overwise been overridden. If you want generated code
      to be compiled with C++ compiler, you must list "cc" in LEX_OPTIONS
      variable. If you want a C++ class version of scanner generated, add
      "%option c++" to first section of lex input file. Alternatively,
      you can add "-+" option to LFLAGS. Don't set LEX to "flex++" as
      this case will not be handled automatically. You also should request
      a C++ class version of the scanner if "cc" mode isn't enabled in
      the LEX_OPTIONS variable.

  + C++ Class Library

    - Added way to C++ service payload classes to add siblings where
      path wasn't interpreted as a hierarchy. The function added for
      this is called sibling(). There are various versions of this
      function, some allowing length of key to be specified and thus
      allow embedded nulls.

  + Python Wrappers

    - Added ability in Service to specify callback for reports which were
      sent directly to a service and not generally published. The method
      is acceptReports() and can be cancelled using ignoreReports().

    - Added serviceName() and agentIdentity() methods to Service class.
      Saves having to obtained service binding object to get them or
      having to cache them oneself.

    - If any of the service binding methods are invoked against the
      object returned by the serviceEndPoint() method, the call will
      be made against the local copy of the service binding for the
      service, rather than making a call to the remote service. This
      does mean you can't export methods with the same names as those
      in a service binding object, but that isn't recommended anyway
      as you would be overridding or exporting some inbuilt methods
      of a service.

    - Can now supply a optional last argument to monitorResponse()
      which is a timeout for how long to wait. If this is used, the
      timeout will look like a failure, where the error code has the
      value CLIENT_REQUEST_TIMEOUT.

    - If a the method a request refers to doesn't exist, the invalidMethod()
      member function of Service is now called. This by default throws the
      appropriate failure exception. You might override this to implement
      your own method lookup mechanism.

    - Added Monitor class which gives access to lookup functions of the
      service registry and the ability to subscribe to aspects of the
      service registry. This functionality was only in the Service class,
      but use of the latter would result in a service agent being created
      and existance being broadcast. Use the Monitor base class instead of
      the Service base class if you don't need to the full functionality of
      the Service class. The Monitor class still derives from Agent, so all
      its functionality is still available. The Service class now derives
      from Monitor.

    - Added Registry class which gives access to lookup functions of the
      service registry without needing to derive from Service.

    - Added class wrappers for EchoServlet, FileServlet and RpcServlet
      corresponding to the equivalent C++ classes.

    - Added Job class so that jobs with parameters can be scheduled with
      the dispatcher.

    - Added Time class to netrpc module. The class simply takes a string
      which is expected to be in form "hh:mm:ss".


Changes in OSE Version 7.0b6
----------------------------

  + Migration Issues

    - In the Python service object, the order of arguments in the
      monitorResponse() function has been reversed. This was to make the
      callback the first argument so it was consistant with all other
      methods taking callbacks.

    - In the Python service object, the discardResponse() method is
      now called ignoreResponse() instead.

    - The C++ OTC_XmlRpcServer class has been removed and XML-RPC is no
      longer supported. In it place is the OTC_RpcGateway class which
      supports an alternative to XML-RPC but which is currently specific to
      OSE.

    - The type terminology used in service payloads has been changed to
      align with that defined by the XML Schema Datatypes. A null is now
      represented as a value with no type or an empty type field and is no
      longer a separate element type.

    - The header(char const*) member function of OTC_HttpSession and
      OTC_HttpServlet now return an OTC_String and not an iterator
      over a string. Multiple headers are now combined as is permitted
      under HTTP rules. Ie., each is separated by a comma.

    - In OTC_HttpSession, all header fields are now squashed to lower
      case rather than relying on case insensitive comparisons. If using
      the OTC_HttpServlet class, make sure all queries of header values
      are down using lower case header field names.

    - The "ose" Python module has been renamed to "netsvc". There is now
      a new "netrpc" module. The "netrpc" Python module can be used
      standalone, ie., without OSE libraries, as a client to the RPC over
      HTTP protocol used by OSE.

    - In Python service agent, the service endpoint method is now called
      serviceEndPoint() instead of serviceEndpoint(). This change was to
      make it consistant with naming used elsewhere.

  + Bugs Fixed

    - Found workaround for problem whereby GCC 2.95.X compilers will
      die with an internal compiler error. The bug in the compiler
      relates to pure virtual methods in template classes.

    - Compilation in a remote workspace would fail if a dependency file
      existed in the original source directory and the source code in
      the source directory was making use of the messaging payload classes.
      The problem was that there was no vpath directive for .i files
      in the makeit C++ modules.

    - OTC_ROPayload::numChildren() wasn't implemented and was undefined
      at link time if used.

    - Have eliminated use of __STDCPP__ symbol to denote that an ANSI
      C preprocessor was used. This symbol clashed with symbol in
      Sun C++ 5.2 of the same name but mean't something entirely
      different. Code now assumes that all compilers use ANSI C
      preprocessor. This should be the case with all modern compilers.

    - The OTC_SVBroker class had a wayward mutex lock call which would
      have resulted in deadlock occuring when multithreading was used.

    - Reports cached by OTC_SVBroker weren't being deleted when the
      class was destroyed.

    - Added <sys/socket.h> to lib/OTC/dispatch/otcservbind.cc to resolve
      problem of AF_INET being undefined on Solaris platform. This may
      though have been tied up with __STDCPP__ problem on same platform.

    - Service withdrawals weren't always being propogated correctly
      causing service records in processes remote to the service
      not being deleted when the process holding the original service
      dissappeared.

    - Worked out why transient service agents in Python weren't being
      destroyed when an exception had occurred at some point in a
      callback function. Caused by reference count loop related to the
      traceback object.

    - When a server endpoint was explicitly stopped, the endpoint wasn't
      correctly unsubscribing to the file descriptor. When the OSE
      dispatcher was used this was okay as that would be detected and the
      agent unsubscribed automatically. When using Python dispatcher
      however, the dispatch loop in Python would loop on the now bad file
      descriptor.

    - The base64 decoding routines in OTC_HttpSession OTC_RWPayload will
      now ignore leading and trailing white space and internal whitespace
      where it is allowed in a base64 encoded string. The encoding
      routines for base64 will generate a new line at the start and end
      and after every 76 characters output.

  + C++ Library

    - When using operator[int] on OTC_ROPayload, if the index is greater
      than number of children for case of an array, an invalid node
      reference is returned rather than an exception being raised.

    - When a service agent bounces a request to a different service agent,
      it is now possible to change what method name it is delivered under
      when sent to the new recipient. Change also reflected in Python API.

    - The sendFailure() method of OTCEV_Request can now take an additional
      two arguments which describe the origin of the error and additional
      details related to the error. The origin can be used to include a
      string to identify the source of the error. This can also be used
      to qualify what set of error codes the error value derives from.

    - Added methods to OTC_PLReader for decoding unsigned values from a
      service payload.

    - The OTC_Duration class when output to a string or stream, will now
      include a minus sign before the "P" if the duration represents a
      negative duration. Apparently ISO 8601 does allow this. The minus
      sign will be accepted when reading from a string as well. When
      reading a duration, weeks and years are still not accepted and all
      days, hours, minutes and seconds components must be present even
      if they are zero. Note that a minus sign cannot appear on the
      specific components, only prior to the "P".

  + Python Wrappers

    - Delayed responses in a service request method are no longer identified
      by returning None as this is now a valid return value. If you wish to
      implement a delayed response call delayResponse().

    - If you wish to raise your own specific failure condition in a
      service request method, use abortReponse() method.

    - Execution of service request methods is now routed through the
      executeMethod() call. This can be overridden to catch exception
      types that all request methods might raise and then call the
      method abortResponse() to deliver a more specific failure response.

    - Added means of direct calling other Python services in the same
      process. This is done by the LocalService class, giving it the
      service name.

    - Added RemoteService class. This allows one to call using HTTP
      a service in a remote process. The process receiving the call
      has to be running an instance of HttpDaemon and RpcGateway
      listening on an appropriate address. The argument to the class
      RemoteService is a http url identifying the service on the
      remote process. Note that in performing this type of call it
      will block the calling process.

    - Provide access to HTTP servlet framework in Python through the
      HttpServer and HttpServlet classes.

  + Build Environment

    - Took out knowledge of SUN6.% compiler. There isn't any such
      compiler yet. The compiler with Sun Workshop 6.0 (Forte) is
      actually Sun C++ 5.2 compiler.

    - Don't define ENV_CXXSTDLIB for GCC 2.96 and 2.97. Not sure yet
      that their streams libraries truly adhere to the standard.


Changes in OSE Version 7.0b5
----------------------------

  + Migration Issues

    - In Python wrappers, the final argument used when scheduling
      actions, starting timers or setting alarms used to be a tag of
      type int. This now needs to be a string. A Python exception will be
      raised now because of the difference and you will need to change your
      code. Make sure you change the callback if you are checking the value
      of the tag at that point. Ie., change:

        self.scheduleAction(self.callback,ose.STANDARD_JOB,1)

      to:

        self.scheduleAction(self.callback,ose.STANDARD_JOB,"TAG")

    - In Python wrapper around agent, when schedule a CRON style job,
      instead of saying:

        self.scheduleAction(self.callback,ose.CRON_JOB,0,"* * * * *")

      it is now necessary to use:

        self.scheduleAction(self.callback,"* * * * *","TAG")

      Normal jobs are done the same, ie.,

        self.scheduleAction(self.callback,ose.STANDARD_JOB,"TAG")

  + Bugs Fixed

    - When providing a retry delay to the connect() method of the Python
      Exchange class, it was being interpreted as milliseconds when it
      should have been seconds.

    - Code encoding Python long objects into message payloads was
      decrementing reference count on temporary Python object too soon
      meaning that empty value was potentially being put in as payload
      value for long integer.

    - TimeDuration class in Python module was default to "P0S" when it
      should have been "PT0S".

    - There was no way of receiving failure responses in Python wrapper
      around service agent.

  + Build Environment

    - Changed include/makeit/compiler.mk so it knows about SUN6.X
      compilers. The same entry as SUN5.X is used so hope it works the
      same.

  + Python Wrappers

    - Added ability to Exchange wrapper to be able to authorise client
      connections. This is equivalent to deriving from OTC_InetListener
      used with an OTC_Exchange in C++ implementation.

    - User supplied encoder/decoder functions can now be provided for
      conversion back and forth between message framework payload values
      and Python values. Could be used for instance if user want to have
      payload values converted into types compatible with a Python database
      interface. Can also be used to extend what types can be sent using
      the messaging framework.

    - Added encoder/decoder for Python complex type. Values of this type
      can now be sent/received using the messaging framework. The encoding
      format in the message payload is that used by repr(complex(0,0)) in
      Python.

    - Python service wrapper has been extended to make writing a derived
      service easier. The exportMethod() call has been added which allows
      to make a standard function available by calling using the messaging
      framework. The serviceEndpoint() call has been added to get a handle
      to another service and to allow magic call throughs using normal
      function calling syntax. The monitorResponse() function has been
      added for having callback called when response to request arrives.
      See the "demos/python/database.py" for the best example of the
      new functions in operation.


Changes in OSE Version 7.0b4
----------------------------

  + Migration Issues

    - The HTTP servlet framework has been reworked again so your could
      will need to be updated if you were using it. This includes the
      XML-RPC gateway.

    - The OTCEV_Report::reportData(), OTCEV_Request::requestData() and
      OTCEV_Response::responseData() member functions have all been
      renamed back to what they were when a string was returned. Ie.,
      each is now again called content().

    - The virtual member function OTC_InetListener::authorise() function
      now takes OTC_String const& and not char const*. You will have to
      change your prototype in a derived class if you override this.
      Similary in the OTC_HttpDaemon class.

    - If you were using log channels and had used a log channel name that
      didn't start with a letter or a number, those logged messages will
      now no longer appear in stderr log output or log file output.
      Previously only log channel names starting with '@' were hidden in
      this way.

    - The OTC_SLogger class can no longer be used to capture log messages
      based on the provision of a regular expression. Instead, the
      constructor must be supplied with exact channel name. This is a
      removal of functionality and you code may need to change.

  + Bugs Fixed

    - When static and shared objects on a system were the same, shared
      libraries were not being created when being created in a standalone
      directory. Was okay if combining objects across multiple directories.

    - The operator>>=() functions for converting payload element to long
      or double weren't setting the status flag to false when an overflow
      or underflow occurred.

    - If a service subscribed to another service, but no instances of that
      service existed and the original service then unsubscribed from that
      service, the library would crash due to trying to remove items from
      an instance of OTC_DualMap using a key, where no such key existed.

  + C++ Class Library

    - The existing OTC_HttpServer class has been renamed to OTC_HttpSession.
      The need for a factory method to be registered with OTC_HttpDaemon has
      been changed such that an actual object has to be registered rather
      than a function. Just to be confusing, the base class for the factory
      object is OTC_HttpServer. Various other changes to the whole HTTP
      servlet framework have also been made, including that you now need to
      explicitly call start() on OTC_HttpDaemon to have it start listening
      for connections.

    - The OTC_XmlRpcGateway class has been renamed to OTC_XmlRpcServlet
      and a new OTC_XmlRpcServer class added as a HTTP server object factory
      for creating the XML-RPC servlet. Note that the XML-RPC server takes
      a service group and your service agent must be in that service group
      for it to be able to receive requests via XML-RPC interface. This
      is done as a way of you having to consciously make a decision that
      your service agent only uses payload elements which are XML-RPC
      compatible.

    - The OTCEV_Report::reportData(), OTCEV_Request::requestData() and
      OTCEV_Response::responseData() member functions have all been
      renamed back to what they were when a string was returned. Ie.,
      each is now again called content(). The return type though isn't
      a string but an instance of OTC_ROPayload.

    - An empty service group name is no longer valid and a request to add
      to such a group will be ignored.

    - The virtual member function OTC_InetListener::authorise() function
      now takes OTC_String const& and not char const*. Similary in the
      OTC_HttpDaemon class.

    - Any log channel name which is not a letter or number is now hidden
      from stderr log output and log file output.

    - Add OTC_FileServer and OTC_FileServlet for serving up files as part
      of the HTTP servlet framework.

    - Floats output into payload with 12 digits of precision instead of
      default for system, usually 8.

    - The server host and port in OTC_HttpSession will be filled out with
      the contents of the "Host" property, or the actual host name and
      HTTP daemon port, if those values aren't present in the URL.

    - The OTC_SLogger class changed to match channels based on exact match
      rather than a regular expression.

    - The service binding object which gives address details about a
      service, now provides human understandible agent and process identity
      strings. These incorporate agent receiver ID, process ID and host
      name as appropriate.

    - The XML-RPC request decoder can now handle there being no <params>
      tag, a null element <params/> tag or an empty <params></params>
      matching pair. Not all these combinations may necessarily be stricly
      valid according to a reading of the XML-RPC specification, but some
      client implementations make use of these. The server has thus been
      flexible enough to handle them even if they might not be correct.

    - The XML-RPC request decoder can now handle <value/>, <struct/>
      and <data/> tags as well as those for specific value types, ie.,
      <string/>, <int/> etc.

  + Python Wrappers

    - The Python wrappers have been updated to work with the service
      agent framework, ie., use of OTC_SVPayload instead of OTC_String
      in content of messages. Wrappers have also been added around
      creation of HTTP daemon and XML-RPC and File servlets.

    - Using the logger interface, it is now possible to monitor specific
      channels and have any logged messages handled in Python code.

    - Added a Python GUI for monitoring service agents in a distributed
      application making use of OTC_Exchange, OTC_SVBroker etc. The GUI
      is in Python, however, it can be used to monitor service agents
      in both Python or C++ programs. At the moment the GUI is more
      proof of concept and thus should be regarded a bit as a work in
      progress as there are still features to add and the whole means of
      presentation may yet be changed.

      After you have installed contents of "python" directory, you can run
      the "spyon" program with a single argument identifying the port on
      which the exchange process is listening. Ie.:

        spyon localhost:11111


Changes in OSE Version 7.0b3
----------------------------

  + Migration Issues

    - Because of changes to messaging system, the version number used
      in the guard byte has been incremented. This means that applications
      written against an older version of the code will not be able to
      talk to this newer version. Attempts to connect will result in
      connections being dropped when addressing information is being
      swapped at the messaging layer.

  + Bugs Fixed

    - The documentation tools header file parser was getting confused
      when base class list wasn't on the first line as class name. More
      specifically when line ended with ":" and remainder of base class
      list was on next line.

    - When generating MML from the documentation tools, if the length of
      the base class list was too long, the base classes weren't being
      included in the output when generating the class definition in
      the synopsis.

    - The documentation tools weren't squashing spaces for typedefs inside
      a class.

    - The documentation tools couldn't handle a preprocessor directive
      which spanned more than one line.

    - Sun C++ 5.X compiler doesn't seem to call ios::init() with the
      streambuf from its ostream() constructor. The result is that the
      stream is in a fail state. This was resulting in tracing not being
      output, but why log stream was still working isn't known.

      Now call both ios() and ostream() constructors with streambuf and
      call ios::init() as well as a way of ensuring that ios is initialised
      correctly one way or another. This should hopefully compile and work
      on all platforms and compilers.

    - The OTC_PLReader class overloads int and OTC_Boolean. When compiler
      doesn't support bool, OTC_Boolean is the same as int and thus both
      prototypes can't be present. One prototype was excluded in the
      header file but wasn't being so in the corresponding code file.

    - OTC_RWPayload used ios::setstate() when it should use ios::clear().
      The first function isn't always public or isn't available in older
      streams library implementations.

    - When an agent subscribed to a service group, a service group
      announcement for each service in the specified group, would be
      errornously sent to any agents who had subscribed to the registry as
      a whole as well as the newly subscribed agent.

    - The $SERVICE, $LOCAL-SERVICE and $REMOTE-SERVICE routing addresses
      would not have been working.

    - On platform where same object files can be used for both static and
      shared libraries, in some circumstances makeit would fail because it
      would try and recreate symlink which already existed. Now remove
      any existing symlink before recreating it.

  + C++ Class Library

    - Added demonstration program in demos/stream which emulates the
      UNIX chargen service. The program keeps track of when a socket
      would block and stops sending data until the socket has cleared.

    - Service agents can now say that they want to join groups, with
      it being possible to subscribe to groups to know when this happens.

    - A service group announcement is also generated when you subscribe
      to a service address and that service agent joins or leaves a
      service group.

    - A new overloaded version of OTC_Event::queue() has been added.
      This version takes a first argument of OTC_Iterator<int> as opposed to
      a single integer. This allows you to easily have an event queued
      for multiple agents.

    - Added OTC_Subject::observersExist() so you can determine if an
      instance of OTC_Subject has any registered observers.

    - If exchange announcement cannot be delivered, the subscription
      for the non existant agent will now be deleted automatically.

  + Documentation Tools

    - Revamped MML output from documentation tools so that generation
      of HTML using WebWorks via FrameMaker was possible.


Changes in OSE Version 7.0b2
----------------------------

  + C++ Class Library

    - It is no longer necessary to flush an instance of OTC_OSStream to
      get formatted content appended to the string the stream refers to.
      Any formatted data will be appended to the string as soon as the
      stream is used.

    - Added demonstration programs in demos/service for publish/subscribe
      and request/reply features of service agents. Also shows how to
      bridge requests from XML-RPC client.

  + Bugs Fixed

    - Win32 makefiles didn't include new service message payload source
      files or XML-RPC servlet.

    - Service addresses were being incorrectly constructed when multiple
      exchange groups with different names were being used in a distributed
      application. The result was that an internal sanity check failed
      with a corresponding warning being produced when an exchange server
      was forced to exit.


Changes in OSE Version 7.0b1
----------------------------

  + Licensing Issues

    - From this version, OSE is now released under the QPL. The QPL gives
      you the ability to modify the source code where the old license
      didn't. The QPL does however require you to make your source code
      free in circumstances where you distribute the software you write
      which links with OSE. Check out the QPL document for the specific
      details of what you can and can't do. Note that developers of
      commercial or propietary software may not be able to use OSE under
      the QPL so check the license before you do so.

  + Changes Yet To Be Finished

    - The Python wrappers around the service agent framework haven't yet
      been updated to handle the structured message payloads. The makefile
      will currently not try and compile those parts of the Python library.

    - The code which decodes an XML-RPC request does not yet handle empty
      element tags, XML processing instructions, CDATA sections or XML
      comments. XML-RPC clients seen haven't used these so you should still
      have something usable for the time being.

  + Migration Issues

    - This version was started with a snapshot of OSE 6.0pl14. Thus any
      bug fixes in latter version of OSE 6.0 series also appear in this
      version.

    - When the OTC_Tracer class is outputing trace to the logger, it no
      longer outputs any trace output to the "TRACE" channel but to the
      default empty channel. You will need to use environment variable
      OTCLIB_TRACECHANNEL or OTC_Tracer:setLogChannel() to set it back to
      "TRACE" if you were relying on that behaviour.

    - The OTC_ConfigDatabase class has been renamed to OTC_Properties.
      Also, the renamed class now sends error messages to default channel on
      the logger. If you don't want them displayed but want them captured
      you will need to explicitly specific a hidden log channel. In a
      threaded environment, make sure you use a unique value for the log
      channel.

    - Constructors of the classes OTC_InetClient, OTC_InetListener
      and OTC_InetServer which were there for backward compatability only
      have been dropped. Similarly with UNIX socket versions of classes.
      You will need to insert "MESSAGE" as first argument to the call of
      the constructor to obtain the same result.

    - The framework of classes based around OTC_EndPoint, OTC_EPInterface,
      OTC_EPServer, OTC_EPClient have been modified to add new features
      and to also get rid of ways of working with the classes which turned
      out not to be too good. If you had created your own derived classes
      based around these classes and their derived classes, you will most
      likely have to rework your classes to get them to compile and work.
      I don't know of anyone however who has actually done this.
    
    - The OTC_Pathname class incorrectly allowed embedded nulls to be
      added into a pathname. The ctor, operator=() and operator+=() which
      accepted an OTC_String have been removed. The operator+=() accepting
      a single character has also been removed. For the latter you will
      need to add the single character as a string instead. The ctor which
      accepted an OTC_String has been removed and you may as a result
      get compiler errors in some circumstances. You will need to use
      string() on the instance of OTC_String or explicity create the
      OTC_Pathname. The operator+() members of OTC_Pathname have been
      removed as well. If you want to do manipulation of the pathname,
      assign it to a string first. Finally, the input and output for
      streams has been removed. If you want to do streams input, do it to a
      string first. The output to a stream will still work due to
      conversion operator to char const*.

    - OTC_Directory allowed embedded nulls to be contained in the name.
      Versions of functions accepting OTC_String changed to char const*.
      The result of this shouldn't be noticeable.

    - The OTC_VString class got renamed to OTC_DOMString and is now
      specific to DOM classes. Generic version caused a lot of problems.

    - In order to create your own variant of a HTTP server you no
      longer derive from OTC_HttpServer but instead OTC_HttpServlet.
      Installation of HTTP server types with OTC_HttpDaemon is no
      longer provided, instead you load against a specific path of a
      particular instance of OTC_HttpDaemon a factory method for creating
      a derived version of OTC_HttpServlet.

    - Routines in OTC_HttpServer for doing b64 decoding and url decoding
      and encoding have had their arguments changed around and for the
      latter the name changed.

    - The request/reply and publishing methods of OTC_SVBroker no longer
      allow you to specify arbitrary content but has been hardwired such
      that you have to use OTC_SVPayload to construct the content.

    - Because of changes to messaging system, the version number used
      in the guard byte has been incremented. This means that applications
      written against an older version of the code will not be able to
      talk to this newer version. Attempts to connect will result in
      connections being dropped when addressing information is being
      swapped at the messaging layer.

    - It is no longer possible to specify service properties when binding
      a service broker to an agent. If you have done this you will not
      get a compiler error telling you that the code will no longer work
      as your service properties will instead be taken to be the service
      audience. Service properties should be replaced with publication
      against some subject, or use of some central trader service which
      you register your service properties with.

    - The host configuration SPARC_SUN4 has been removed. The following
      host configuration names have been renamed.

        SPARC_SOL2 --> SPARC_SOLARIS
        X86_SOL2 --> X86_SOLARIS
        ALPHA_OSF --> ALPHA_DIGITAL

  + Bugs Fixed

    - If a subscriber to a service agent dissappeared due to loss of
      intervening interprocess communications links, or was destroyed, any
      subscriptions that that subscriber had on a service agent would
      necessarily be removed.

    - The OTC_InetAddress class wasn't generating hostname correctly,
      always generating numeric hostname. It also didn't search through
      aliases relating to an IP address in case DNS was returning strange
      entry where primary name was in numeric form.

    - OTC_Pathname was missing operator=(char const*). The class also
      allowed embedded nulls which is now outlawed. Similary with the
      OTC_Directory class.

    - Various code changes to make streams more conformant to ANSI C++
      standard. These changes are only relevant when ENV_CXXSTDLIB is
      defined.

    - In OTC_HttpServer whether the content as determined by the content
      length header had been received or not was failing.

    - How derived ostream classes initialise base class has been put
      back to what the standard seems to dictate. The result may be that
      some early versions of Sun C++ 5.X may crash the code at runtime, but
      right now latter versions of Sun C++ 5.X will possibly crash
      otherwise. Getting very confusing as to what is broken and how best
      to work around the problems so all work arounds removed with
      expectation that compiler and compiler streams library does the
      correct thing.

    - Previous change had disabled the feature whereby if a platforms
      object files can be used for both static and shared libraries
      that object wouldn't be built twice. Fixed problem in same
      feature however whereby it was necessary to have run lib target
      first so that static library existed. The shlib target will now
      create the static library first as necessary.

    - In OTC_EPISStream, the count of how many messages yet to be sent
      wasn't reset to zero when messages were deleted. For a client
      endpoint, this would have resulted in an incorrect count if the
      endpoint reconnected and there were messages still queued for
      delivery from previous connection. This would have caused an
      assertion failure, program crash or poor performance as code would
      possibly have kept looping trying to send messages which didn't
      exist.

    - When using DLL on Win32 systems, OSE release tag information
      variable was coming up undefined due to it not being exported.
      The scheme this was a part of is only employed on UNIX now.

    - Missing the fcntl.h include file in INET socket listener class
      implementation. This mean't that in a server, sockets weren't being
      set to non blocking.

    - There was no code in UNIX socket listener for setting sockets to
      be non blocking when connections were accepted. The close on exec
      flag also wasn't being set.

    - Listener for UNIX based socket connections wasn't accepting
      connection requests on Linux. For some stupid reason which isn't
      understood the listen backlog was set at 0 which had always worked
      fine until newer versions of Linux came along. Backlog set to more
      traditional value of 5. Same done for INET based socket listener
      although it still worked.

    - Borland C++ has getpid() whereas as Visual C++ has _getpid().

    - Define socklen_t typedef local to OTC_InetAddress and OTC_UnixAddress
      classes when believe that system doesn't define it. Originally the
      third argument to accept() was "int*", but POSIX did a stuff up and
      made it "size_t*" in a draft which was actually wrong as size_t
      isn't always size of an int. Apparently to cover up their mistake
      then changed it to "socklen_t*". Some platforms are now defining
      socklen_t to "u_int*" and not "int*" which makes the "int&" return
      type of addrlen() in the above classes a problem as it doesn't
      match third argument of accept(), getpeername(), get sockname()
      etc. Thus changed return type to socklen_t and try to fudge it when
      we don't think that typedef is defined.

    - In OTC_InetListener and OTC_UnixListener the listener socket should
      have been in non blocking mode else if the connection was aborted
      after notification by poll() but before accept() was called, the
      accept() call could block.

    - In OTC_InetListener and OTC_UnixListener, if the accept() call
      failed when a connection is received, the listener socket was
      being closed when it probably shouldn't. Instead, that the accept()
      call failed is just ignored on the basis that if we got this far the
      listener socket is valid. Only other reason for failure of accept()
      will be if connection was aborted. The whole shutdown(int,int) method
      has been removed as it is probably bogus.
      
    - Although not used, the OTC_UnixListener class was actually populating
      an INET address structure rather than a UNIX address structure when
      calling accept().

    - Internal assertion error would occur in OTC_HashTable when the
      argument OTCLIB_REPLACE was used with add() member function of
      OTC_HSet and OTC_HMap and a value with the same hash value but
      different rank already existed in the collection.

    - Methods of OTC_String for doing sectioning of a string based on
      single index, ie., after(), weren't giving nice exceptions when
      index was out of range but were generally resulting in the program
      crashing due to memory being exhausted.

  + Installation

    - By default Linux now uses poll() over select() in config file.
      If you are using a kernel prior to 2.2, you will need to change
      config/X86_LINUX/OSE-CONFIG.h and comment out HAVE_POLL.

  + Build Environment

    - Added knowledge of GNU 2.96 and 2.97 development compilers.

  + C++ Library

    - Added optional first argument to OTC_Program::uniqueId() so that
      a prefix for the id string can be specified.

    - Reinstated a feature which was in publish/subscribe system while
      in development but which was dropped. That is, a service agent is
      told about subscriptions which are made against it. The event
      class which notifies of this is OTCEV_Subscription. An instance of
      this is passed to a service agent by OTC_SVBroker. When a subscriber
      dissappears, that the subscription is withdrawn is also notified.
      Note that if there are cached entries against a subject, that
      entry will be sent to the subscriber before the publisher receives
      its notification.

      Along with this, also have added back sendReport() function which
      allows explicit publishing of a report to a specified service
      agent. This allows one to trigger the sending of a report to a
      particular subscriber when its subscription request is seen. This
      will bypass the caching mechanism, so would tend to be used only
      if when doing normal publishing that you set expiry time to zero
      so reports aren't cached.

    - OTC_SVBroker::matchSubject() made protected so that agent can use
      it to determine if subject pattern matches subject based on current
      matching algorithm. This could be needed if you are making use
      of subscription notifications to trigger generation of up to date
      data for publishing.

    - Add encode() member function to OTC_Properties to allow formatting
      into a string. This string can be fed back into the load() routine
      using a stream.

    - Added additional member functions to OTC_Properties to allow removal,
      loading and merging of name/value properties under a specific key
      prefix.

    - Added address() and numericAddress() member functions to the class
      OTC_InetAddress to get composite string value containing the name
      of the host and the port number.

    - Added address() member function to the class OTC_UnixAddress to
      complement same in OTC_InetAddress. The function returns the same
      as the pathname() function.

    - Added address() member function to OTC_InetClient for obtaining
      the address being connected too as one string combining hostname
      and port number.

    - Added address() member function to OTC_UnixClient to complement
      same in OTC_InetClient. All it does is return same as pathname().

    - New attributes of a connection added to constructor for the
      OTCEV_Connection class. These relate to the transport protocol
      and the local and remote addresses at the transport layer.

    - Added fd() member functions to OTC_InetClient, OTC_InetServer,
      OTC_UnixClient and OTC_UnixServer to gain access to file descriptor
      used for socket connection. Originally this was added to OSE 6.0
      after split for OSE 7.0 was done, to allow a back door way of finding
      out socket name for remote end of connection, however this is better
      achieved through new attributes of connection event.

    - Instances of OTC_Exchange now swap process name information in setup
      messages. This information is available in the exchange announement
      event. Older clients will still work but process name will come out
      as being empty.

    - Added virtual authorise() member function to OTC_HttpDaemon so that
      derived class could provide routine to reject HTTP client based on
      the host where it came from. Note that in this case the rejection is
      before any HTTP server object is created and no response is sent back
      to the client. If you want to send back a response or base the
      rejection on the details of the request, your processRequest() member
      function should use the clientHost() member function to determine
      what to do.

    - The default input read size for stream oriented interprocess
      communications implemented by OTC_InetClient and OTC_UnixClient
      when the interface is set to "STREAM", can now be overridden by
      the environment variable OTCLIB_STREAMINPUT. The default value
      is 4096 bytes.

    - Added classes OTC_DOMNode and OTC_DOMProperty for representation
      of a document object model. The requirements of this are loosely
      modeled after that needed for XML. Note that the classes are
      optimised for the case where the document object model is constructed
      and then destroyed almost straight away as might be used where
      a data structure is turned into a DOM for translation into XML. The
      classes would thus probably not be suitable for something where the
      document object model is continusously edited. Note that no routine
      for conversion to XML is actually provided.

    - Added contentLength() member function to OTC_HttpServer. This returns
      the content length specified in the HTTP header or -1 if no content
      length was supplied.

    - Added contentType() member function to OTC_HttpServer. This will
      returns the "Content-Type" field in the HTTP header or an empty
      string if none exists.

    - Added c_str() function to OTC_String class to make things consistant
      where standard C++ library string class is being used as well.
      Also makes transition one way or the other easier.

    - Removed derivation of OTC_Pathname from OTC_SObject. This was causing
      problems if the class was used in string manipulation operations.
      The pathname shouldn't have embedded nulls so conversion to char
      const* should be adequate.

    - The event which triggers the final dispatcher shutdown when the
      class OTCEV_Shutdown is used is now scheduled as a priority job and
      not an idle job. If scheduled as an idle or standard job, if a small
      period recurrent timer was running it would lock out the shutdown of
      the dispatcher, similary if a standard job kept rescheduling itself.

    - Added OTCEV_Congestion event class for notifying of congestion
      problems in the interface associated with an endpoint. The class can
      be used to indicate that the connection has blocked, has subsequently
      cleared or that the interface has a backlog of messages to send.
      Under normal conditions, instances of this event will be broadcast
      via the OTC_Subject base class of an instance of OTC_EndPoint. Note
      that backlog notifications relate to the number of messages and not
      to the size of data which may have to be sent.

      This event type is generated by both the MESSAGE and STREAM versions
      of client/server socket classes. For the server case, if you add
      yourself as an observer of the listener, you will receive congestion
      events for all servers created by that listener. Ie., you do not
      need to individually add yourself as an observer of each server
      object.

    - Added virtual authorise() function to OTC_InetListener class. This
      method is called with the name of the remote host from which a
      connection has been received. By default the function returns true
      meaning that the connection will be accepted. The function can be
      overridden in a derived class to selectively block certain remote
      hosts from connecting.

    - Added OTCEV_Failure event class. This can be generated by using the
      sendFailure() method on an OTCEV_Request event. It should be used
      if the request can't be handled due to an incorrect method name or
      due to the content not being able to be decoded or doesn't contain
      what it should.

    - When doing user authentication in HTTP server, implementation now
      by default does a callback to the HTTP daemon to do the authentication.
      The default HTTP daemon implementation lets all requests in.

    - Added version of sendHeader() to OTC_HttpServer which takes an
      integer value. The integer value will be converted to its string 
      representation. This function can be used when specifying the
      content length. Ie.,

        sendHeader("Content-Length",theResponse.length());

    - Reworked framework for creating HTTP servers to add concept of
      HTTP servlets. This means you no longer derive from OTC_HttpServer
      but OTC_HttpServlet instead. An example of how to do this is the
      OTC_EchoServlet class which echos back information about the HTTP
      request. The way the servlet concept has been implemented allows
      for registration of different servlet types against different path
      prefixes of the same HTTP daemon.

    - The final request path produced by the HTTP server, now has redundant
      cojoined instances of the directory separator, ie., '/', removed.
      Except for when the root directory is specified, any trailing '/'
      will also be removed. Instances of "." and ".." as directory path
      components are resolved and eliminated with an attempt to access
      anything above the root resulting in a failed request.

    - Expanded range of encoding/decoding functions in OTC_HttpServer
      related to xml, url and b6 encoding/decoding. The functions are
      also available in interface of OTC_HttpServlet.

    - Added OTC_SVPayload, OTC_RWPayload and OTC_ROPayload. These classes
      are specifically for building up a data model which can then be
      serialised for use in interprocess communications mechanisms. The
      OTC_SVBroker class now uses this instead of allow you to specify
      arbitrary message content. The OTC_PLReader is a special helper
      class which allows reading into typed values from an OTC_ROPayload.

    - The OTC_Date class accepted instances of OTC_String for conversion
      to a date. This has been changed to "char const*" as OTC_String was
      not really valid as it allowed embedded nulls. Similarly with the
      OTC_Time and OTC_Duration classes.

    - When OTC_Date is output to a string in ISO 8601:1988 extended date
      format, now always fill out century/year with leading 0's to make
      up 4 digit width. This makes it more compliant with the standard.
      Still stick on a leading "-" is year is less than "1" although not
      sure how valid this is.

    - Add OTC_XmlRpcGateway. This is a HTTP servlet that can translate
      XML-RPC requests into service requests. There is an example program
      for the XML-RPC gateway in the "demos/xmlrpc" directory.


Changes in OSE Version 6.0pl14
------------------------------

  + Notices

    - A warning about the use of multiple reader threads on an instance
      of an OSE collection supporting iterators. If you are doing this, you
      must create the iterators in an unsafe mode by passing the argument
      OTCLIB_UNSAFE. This will turn off the use of the reference counting
      which ensures integrity of the iterator when changes are made to the
      collection. Obviously, since it is a reader thread, nothing should be
      modifying the collection against which the iterator was created. The
      iterator should be destroyed before leaving the scope of the locked
      mutex. If you do not do this, the multiple reader threads can corrupt
      the internal reference counts on individual items in a collection as
      they are not individually mutex protected. That this is the case is
      not clearly documented.

  + Bugs Fixed

    - If in host config for a specific compiler a macro related to
      library creation was overriden so as to be empty, the default
      would still have been used.

    - Added a global mutex to protect the manipulation of the reference
      count in an instance of OTC_Resource in a multithreaded application.
      Note that this DOES NOT mean that OTC_Resource is completely thread
      safe. It solves a particular problem related to the implementation of
      the OSE collection classes where there are multiple reader threads
      working with a particular collection at the same time and a shallow
      copy is performed. In general though, it is still necessary to have
      external mutex locking around areas where reference counting on
      objects is performed. In particular, incrementing a reference count
      must be done within a mutex lock pertaining to the object which has
      current ownership of the resource on which the reference count is
      being incremented. If this is not done, something could destroy your
      resource before you get to increment the reference count.

  + Build Environment

    - Possible to now define in the host config file the commands
      to run to remove any symbols that get unpacked out of libraries
      when their contents are extracted. By default a whole range
      of possibilities are removed just in case no matter what system
      you are on. If no such symbol files are created, you can add:

        define DEFAULT_SYM_CLEANUP
	endef

      at the start of the list of macros related to library management
      in the host config file and the clean target will not try and
      remove the bogus files.

  + C++ Library

    - More agressive use made of inlining, especially in commonly used
      classes.

    - Finally added a version of ostream for writing output onto an
      instance of OTC_String. This should have been done a long time
      ago as it is made really easy by use of OTC_VFuncBuf. Only thing
      to watch out for with this class is to ensure you flush output
      of the stream before subsequently trying to use the string else
      whats in the buffer will not have made it to the string.

        OTC_String theString;
	theString += "{";

	OTC_OSStream theStream(theString);
	theStream << "text";
	theStream << ',';
	theStream << 144;

	theStream << flush;

	theString += "}";

    - Add the OTC_VString class as a way of getting some string like
      object qualities to a normal character array string. The difference
      to OTC_String is that the instance of OTC_VString refers to an
      external character array which it has no responsibility for deleting.
      As a consequence, the original character array must be valid for the
      lifetime of the instance of OTC_VString. The main purpose of this
      class is to make it easier to do comparisons against a character
      array, parts of a character array or a character array which isn't
      necessarily null terminated.

	class Object
	{
          public:
	    OTC_VString value() const
	      { return OTC_VString(value_,valueLength_); }
	    u_int valueLength() const
	      { return valueLength_; }
	  private:
	    char const* value_;
	    u_int valueLength_;
	};

	Object object;
	...

	if (object.value() == "array")
	  ...

      This is instead of having to do something like:

        if (strlen("array") == object.valueLength() &&
	 strncmp("array",object.value(),object.valueLength())
	{
	  ...
	}

      The OTC_VString class has a conversion operator to char const*, and
      can also be directly assigned to an OTC_String with the complete copy
      of the original character array being made as necessary.

      The V in the name is mean't to reflect that you are referencing a
      character array which is volatile in as much as you don't own it.

    - Changed the internals of OTC_String to use OTC_CommonPool for small
      strings. Also tweaked the block sizes which OTC_String allocates in
      order that they match better with what OTC_CommonPool provides and
      what system malloc libraries might work best with. The use of the
      common memory pool by OTC_String can significantly increase the
      performance of an application which uses a large number of small
      strings of size less than 64 bytes. Previously, the deletion of such
      small strings suffered very bad performance when returned to the
      system malloc libraries. Now the strings go back into the common pool
      for reuse but don't actually go back to the malloc library thus
      avoiding the problem caused by bad performance of the block
      coallescing routines of the system malloc libraries. Note this new
      feature doesn't work if you are using ObjectStore. Also, you must be
      using the default string buffering scheme. If you turn string
      buffering off, the common memory pool isn't used.

    - Added function to OTC_Arena to query about properties of arena. Also
      added release() member function which allows you to say you are no
      longer needing the memory it has allocated without having to destroy
      the actual arena. The release() member function takes an optional
      argument specifying how many blocks of memory which it has allocated
      should it retain. This allows you to free up memory but also retain
      some for further use by the arena.

    - Changed OTC_RString, the internals of OTC_String, so that when it
      needs to delete any memory, that it does it outside of the shared
      data mutex so as to lessen the potential for mutex contention due
      to the freeing of memory resulting in the mutex being locked longer
      than it needs to be. Note that string copies as necessary are still
      done inside the bounds of the mutex, so other techniques still have
      to be used to limit contention in this circumstance.

    - Removed some unused functionality in OTC_RString related to string
      locking. This is nothing to do with threading and was the basis of
      some idea for something else which was never done and isn't needed
      any longer. Removal may mean code runs ever so slightly quicker.


Changes in OSE Version 6.0pl13
------------------------------

  + Bugs Fixed

    - Change in OTC_Subject in 6.0pl12 to allow glob pattern to
      be used on subject names for events caused problems in some
      cases with observer of events not being given the events
      they expected. Not sure why it seemed to work with some test
      programs though. Ultimate reason was the OTC_Globex always
      returns FALSE when asked to match against a null string. This
      behaviour of OTC_Globex can't be changed though so just made
      sure converted null string into empty string before using the
      OTC_Globex class.

    + OTC_Regex would crash program if a null pointer was given to
      its match routine. The OTC_Globex and OTC_Regexp classes always
      return OTCLIB_FALSE when passed a null pointer. These classes
      probably should treat it as an empty string, but possibly too
      late to change now. Manual pages for all three classes updated
      to indicate that this is the behaviour for a null pointer.

  + C++ Library

    - The internals of the OTC_Cluster/OTC_MCObject classes are now
      thread safe. Note that this is only the bits you can't get
      to relating to allocation using the overloaded operator new.
      For particular instances of the OTC_Cluster object and the
      associated OTC_MCObject classes, you still need to have thread
      locks around the modules in which manipulation of the objects
      is done to ensure that multiple threads don't stuff things up.

    - The OTC_MCObject now keeps a reference to the instance of
      OTC_Cluster from which it was allocated. This is accessable
      using a special function called OTC_Cluster::of(). The function
      can be applied to any instance of an object derived from the
      OTC_MCObject class.

      The method could be used as follows to allocate another object
      against the same cluster with all being automatically destroyed
      only when the cluster is actually destroyed.

        class ONE : public OTC_MCObject { ... };

        class TWO : public OTC_MCObject
	{
	  public:
	    TWO();
	  private:
	    ONE* object;
	};

	TWO::TWO()
	{
	  object = new (*OTC_Cluster::of(this)) TWO;
	}

      Note that OTC_Cluster::of() will return a null pointer if
      run against a null pointer, or more importantly it will return
      a null pointer if applied to an instance of a class derived
      from OTC_MCObject which wasn't allocated against a cluster
      but instead was created on the stack, in a vector, as a
      member variable or on the heap. You might want to raise an
      error if this is detected or somehow automatically switch
      implementation schemes on the fly.

    - The ability to allocate arbitrary blocks of memory from an
      instance of OTC_Cluster has been added. This uses the same
      internal memory arena as that used for allocating objects and
      thus memory will be suitably aligned for holding objects
      consisting of integers or floating point values. The new
      member function is called allocate().

        class ONE : public OTC_MCObject
	{
	  public:
	    ONE(char const* theString);
	  private:
	    char* string_;
	};

	ONE::ONE()
	{
	  OTC_Cluster* theCluster;
	  theCluster = OTC_Cluster::of(this);

	  string_ = theCluster->allocate(strlen(theString));
	  strcpy(string_,theString);
	}


Changes in OSE Version 6.0pl12
------------------------------

  + Bugs Fixed

    - Fix in OSE 5.2pl9 to fix memory leaking problem caused string
      associcated with symbol to be left in symbol database and
      never reclaimed. This wouldn't have caused an error as such
      but would have resulted in increased memory use over time if
      range of values for symbols kept growing.

    - If AUTODEPEND=YES was used, dependency file could be updated
      multiple times. It was unclear why this was the case. For some
      reason submakes were being triggered which were causing this.
      Alternate approach is used to implement this feature which
      appears to solve the problem but not absolutely sure it is okay.

    - The workspace target wouldn't work on AIX and possibly other
      platforms as shell interprets quotes differently than expected.
      Changed to different style of quoting.

    - Qualified cpp, C and C++ flags should now work in a workspace.
      Ie., the variables QUALIFIED_CPPFLAGS, QUALIFIED_CFLAGS and
      QUALIFIED_C++FLAGS. The form used for this should be the same:

        QUALIFIED_CPPFLAGS += lib1.cc:-DONE=1

      This means that -DONE=1 will be used when compiling only the
      file lib1.cc.

  + Build Environment

    - Added ability to define additional directories from which
      source files will be used. That is, in addition to those
      in the current directory. This is a bit different to a
      remote source directory and filenames should be unique
      across all directories.

      To enable this feature just set SRCDIRS in the initialisation
      section of the makefile. Ie.,

        SRCDIRS += dir1 dir2

      The name of an additional directory can be absolute but no
      dependency information will then be accumulated for it. If
      using SRCDIRS at the same time as using SRCDIR for a remote
      build, you need to ensure you generate a dependency file
      specific to the remote build directory. This restriction may
      be removed later, but recreating the dependency file in a
      remote build directory is recommended anyway.

      When using qualified cpp, C and C++ flags, only list the
      basename part of the file and not the full relative path.
      Ie., if the file one/lib1.cc exists, you should still only
      use:

        QUALIFIED_CPPFLAGS += lib1.cc:-DONE=1

    - If NODEPFILE is set to YES, the dependency file will not be
      used even if it exists. This is useful on the command line
      when the dependency file is in an invalid state due to files
      being removed and you want to regenerate dependencies without
      doing a clean or explicit remove of the dependency file.

        makeit NODEPFILE=YES depend

      When using a remote build directory, always a good idea to
      generate local versions of dependency files using the above.

    - Added variable QUALIFIED_VARIANT. This allows you to override
      on a per file basis what variant a file is compiled in. That
      is, for that file, the cpp, C and C++ flags will be used from
      an alternate variant specified to the variant being used.
      The variable is used as:

        QUALIFIED_VARIANT += lib1.cc:opt=std

      This says that if the opt variant is in use, the file lib1.cc
      will instead be compiled with those compiler options defined by
      the variant std.

      This feature is useful where a compiler has some problems and is
      unable to compile a file when certain options, such as optmisation
      are being used. In this case you can force the file to instead
      be compiled using std or dbg to get around the compiler bug.

      At this stage, it isn't seen as appropriate that this should be
      extended to cover LDFLAGS and LDLIBS when linking executables
      as doing so may be problematic.

      Note that this feature means that compiler specific options for
      cpp, C and C++ components of the compiler suite no longer are
      included in CPPFLAGS, C++FLAGS and CFLAGS. If you relied upon
      such options being in these variables you will have problems.
      The only circumstances this should really occur is if you had
      been implementing your own very specialised modules which in
      some way replace the standard modules for C and C++ code.

    - In your own makefile you can now say:

        CPPFLAGS_dbg += -DDEBUG

      Where "dbg" can be any of the available variants. This applies
      to the variables CPPFLAGS, C++FLAGS, CFLAGS, LDFLAGS and LDLIBS.

      Way back in history of makeit you could do this, but it was
      more tied up with host configuration and any such settings
      were since being ignored as they were overridden by compiler
      specific values. This feature though has now been reinstated.

      Note that these variant specific options are not folded into
      the general versions of the variables as which is used is
      dependent upon any variant overrides for specific files.

  + C++ Library

    - Changed OTC_Subject so subject for subscription to events is
      actually a glob style pattern and is interpreted as such. Ie.,
      subscription as an observer for subjects of form "event.*"
      would capture any events published with subject starting with
      the string "event.".

      
Changes in OSE Version 6.0pl11
------------------------------

  + Bugs Fixed

    - Removal of $(MK)/ti_files should have been done only when KAI C++
      compiler being used, not the opposite.

    - Some platforms define putenv() prototype with "char*" argument
      instead of "char const*". Need to put in "char*" cast to cater
      for both in OTC_Program class.

    - UnixWare 7.0 only defines "__USLC__" and no longer defines "sco"
      or "_UNIXWARE" as a preprocessor symbol. Certain system dependent
      code checks were reliant on latter symbols so new symbol also
      added.

    - If ENV_CXXSTDLIB is defined make sure <exception> and not
      <exception.h> or other header file is included. Note that this
      header file doesn't actually need to be included any more. If
      a clash occurs between C++ exception class and math exception
      struct, the set of include in "include/OTC/misc/termnate.hh"
      can most likely be commented out and OSE should still compile.

  + Build Environment

    - Added support for template closure when using DEC C++ template
      repositories. This includes enabling the brute force clean
      method of removing makeit subdirectories when doing a "clean".
      This is needed as normal approach will break because of the
      large number of object files which can be placed into a template
      repository when template closure is done. Ie., the maximum
      command line length is reached if kernel option allowing an
      unlimited command line length is not turned on.

    - Added knowledge of SCO UDK C++ as supplied with UnixWare 7.0.
      Think that the compiler version is something like version 3.4.
      You may have to change the compiler entry in the host config
      file to fix the version. You may also have to change the LDLIBS
      definition for the compiler. A sample compiler config for the
      host config file was given back to me so am guessing. Believe
      that compiler.mk is okay. Note that you shouldn't use the -Xo
      compiler option as that will disable bool and exception parts
      of the C++ language meaning OSE will not then compile. You will
      need to fix your code to make it conform to latest language
      syntax.

    - Some platforms have restrictions on the maximum command line
      length when executing a program. When combined with template
      expansion and objects for each template member function, this
      can cause problems when removing object files from the "clean"
      target. Compaq Tru64 is quite bad in this respect. Now have
      option which can be enabled for these platforms so that "xargs"
      program is used to remove object files. This is usually set
      in the compiler.mk file for the compiler in question but can
      be triggered by the user by having:

        MAKEIT_OPTIONS += restricted_command_length

     Note that MAKEIT_OPTIONS must be set before makeit init.mk is
     included. As brute_force_clean is required for above, how this
     is all handled changed. Previously MAKEIT_OPTIONS being set
     after makeit init.mk was included would still work for the
     value brute_force_clean, now it will not. MAKEIT_OPTIONS must
     be set before makeit init.mk is included.

  + C++ Library

    - Added template<> syntax for template specialisations. This is
      enabled by have preprocessor symbol ENV_CXXSTDTPL defined for
      the compiler which requires it.

Changes in OSE Version 6.0pl10
------------------------------

  + Migration Issues

    - Lot of changes were made to interfaces to service agent framework
      added in previous release. Most changes related to the OTC_EVService
      class which now no longer exists. Most functionality shifted to
      OTC_SVBroker class however the interface has changed dramatically.
      The OTC_ServiceDescription class has been renamed OTC_ServiceBinding,
      and OTCEV_Report, OTCEV_Cancellation and other associated event
      classes have been deleted. The OTCEV_Publication class is now called
      OTCEV_Report. Service agents no longer have a concept of a type or
      group, just their name.
      
      Lookup mechanism for OTC_Exchange moved into separate registry
      available through registry() function.
      
      And all manner of other little things. It is highly unlikely that
      anyway was yet using any of this stuff as you were warned against
      using it just yet.

  + Bugs Fixed

    - The OTC_Array class wouldn't compile correctly with ObjectStore.

    - CLOSURE_LDFLAGS and CLOSURE_LDLIBS were forcibly being set to
      LDFLAGS and LDLIBS even when overridden by user. This wiped out
      users definition.

    - $RECEIVER and $RECEIVER-REMOTE as routing addresses weren't working
      properly across more than one interprocess link.

    - EGCS C++ entry on Linux shouldn't have been using -h option when
      creating shared libraries.

    - Remove possibility of variable being used uninitialised when cloning
      and instance of OTCEV_Envelope. Not sure if situation would ever
      have occured which resulted in this possibility though if code using
      class was okay.

    - Multiple threads associated with one thread pool weren't able to
      execute at the same time due to execute code being inside mutex lock
      on event queue.

    - SCO header files are badly written in that they defined shutdown()
      as a macro. This causes problems in code where shutdown() is a
      member function name. Add #undef's to get rid of SCO macro definition.
      This will prevent system shutdown() function being used. The system
      header files should be fixed so they use an inline when C++ is being
      used.

    - GNU C++ 2.95 will not let you pass an int* type where an u_int* type
      was expected flagging it as a compile time error. This causes a
      portability nightmare with system functions such as getsockname() and
      accept() which take a pointer for returning the length of the socket
      address. On most machines this pointer is int* but on some it is the
      equivalent of u_int*. Uses of these functions now check for Linux
      and UnixWare which use u_int* and use u_int* instead. The most likely
      place you might have with this in your code is when using the class
      OTC_InetAddress or OTC_UnixAddress. There is no easy fix unless an
      option can be found on the compiler not to flag this as an error. Ie.,
      you will need to change your code and check for the presence of
      the different platforms.

    - When select() was used in dispatcher loop, signals weren't being
      correctly serviced when select() had blocked and there were file
      descriptors which had event subscriptions.

    - OTC_CVMutex::broadcast() didn't work correctly on Win32. Win32
      doesn't support condition variables natively and implementing the
      same behaviour is tricky. Hope new code works. :-)

    - Makeit generated bad inbuilt dependencies when a module was
      generating C++ program source code, ie., if setting the variable
      _cc_generated_PROGRAM_SRC. This caused makeit to fail.

    - Go back to using /bin/sh as first line of shell scripts instead of
      full path to actual shell used. This was only an issue on Windows
      where Cygwin was used. Full path to bash was being used because
      it wouldn't work otherwise. Problem is that as part of Cygwin
      installation you should be copying bash sh.exe to /bin on primary
      hard drive. Using /bin/sh shouldn't affect MKS Toolkit as in that
      case, shell scripts are given .ksh extension and shell should
      ignore the first line anyway.

    - Wasn't importing cin into global namepspace in:
    
        include/OTC/stdlib/iostream.h.

    - KAI C++ compiler config under X86_LINUX for creating library wasn't
      rearchiving all objects when only one was changed. All objects have
      to be rearchived for template closure to work correctly. Creation
      of shared library should have always been using all objects as well.

    - OTC_OrderedList::removeRange(u_int,u_int,OTC_Protection) was
      ignoring user provided third argument with default always being
      used.

    - Variable for accumulating statistics in OTC_Pool not initialised
      to zero in constructor.

    - A using statement for std::hex wasn't being defined.

    - Option -vdelx not being supplied when using Sun C++ 5.0 in 4.X
      compatability mode and ObjectStore also being used.

    - When determining if Standard C preprocessor being used, __MSC_VER
      being check for Visual C++ instead of _MSC_VER. This would have
      mean't messages from exception messages wouldn't include condition
      code correctly.

    - Read/write mutex was only letting one reader in to locked region
      at a time.

    - KAI C++ create a ti_files directory in makeit subdirectory. This
      wasn't being removed when clean target was run.

    - OTC_BitSet::operator=() gaves wrong result when LHS was of the
      same length as the result of the RHS of the assignment.

  + Build environment.

    - There is a now a sanctioned location for locally defined modules
      if you don't want to set up modules specific to a project you
      are working on. If OSE is being installed under the root directory:

        /usr/local/ose

      the sanctioned directory will be:

        /usr/local/ose/modules

      In this directory you must include a file called "init.mk". The
      only line this file should contain is something like:

        LOCALMODULES = cat dog

      where "cat" and "dog" are the names of the modules. That same
      directory should then contain the module files "cat.mk" and
      "dog.mk".

      Any modules listed in LOCALMODULES will be included before the
      core modules if a makefile requests them.

      The above means you do not have to go hacking the installed OSE
      files or putting your personal modules in the OSE install area,
      which wasn't what you were mean't to be doing anyway. As always,
      avoid using module names which clash with OSE modules or other
      internal files used in makeit.

    - The target "classes" in the java module has been changed to the
      target "java-classes". The target is automatically triggered by
      the "all" target and "lib" target as needed still.

    - Added new module for TCL/TK libraries. The module is called "tcl".
      By default only TCL library is linked, but setting TCL_OPTIONS to
      "tk" in the initialisation section of your makefile will result in
      the TK library also being linked.

      Note that this module by default expects include files and libraries
      to be in standard locations looked at by the compiler being used. If
      that is not the case, you must create in the config directory for your
      host the file called "tcl-defns.mk". In this file you should define
      the variables:

	TCL_INCDIR
	TCL_LIBDIR

      Optionally define:

	TK_VERSION
        TCL_VERSION

      if necessary. These will be used when picking up the appropiate
      libraries. If not defined, will use -ltk and -ltcl. If only the
      TCL_VERSION variable is defined, TK_VERSION will be set to that.
      Would only be required to be different if you were using an older
      version of TCL/TK.

    - Added new module for X11 libraries. The module is called "x11".

      Note that this module by default expects include files and libraries
      to be in standard locations looked at by the compiler being used. If
      that is not the case, you must create in the config directory for
      your host the file called "x11-defns.mk". In this file you should
      define the variables:

	X11_INCDIR
	X11_LIBDIR

    - Added new module for Python. The module is called "python". At
      the moment all this does is setup include search path for
      preprocessor. This is all that is required if you are creating shared
      libraries for use with Python's ability to dynamically load modules.
      Other features might be added to the module at a later date.

      Note that this module by default expects include files to be in
      the include directory:

        /usr/include/python1.5

      If that is not the case, you must create in the config directory
      for your host the file "python-defns.mk". In this file you should
      define the variables:

        PY_VERSION
	PY_INCDIR

    - Added new module for Qt. The module is called "qt". The module
      handles generation of moc files from header files as necessary.

      Note that this module by default expects include files to be in
      the include directory:

        /usr/lib/qt/include

      the moc program to be in:

        /usr/bin

      and the library to be in a standard system library directory.

      If that is not the case, you must create in the config directory
      for your host the file "qt-defns.mk". In this file you should
      define the variables:
      
        QT_INCDIR
	QT_LIBDIR
	QT_BINDIR

    - Added new module for X11 libraries. The module is called "x11".

    - Added host support for MIPS_RELIANT platform and CDS C++ compiler.

    - Updated KAI C++ compiler entry in X86_LINUX config for KAI C++ 3.4.

  + C++ Class Library.

    - OTC_ServiceDescription class now called OTC_ServiceBinding.

    - All functions relating to request/reply and publish/subscribe
      functionality of OTC_EVService have been moved into a new class
      called OTC_SVBroker. The OTC_EVService class has been deleted.
      This has been done so the interface for the base framework doesn't
      clutter up interface for a derived agent. This is desriable as base
      interface isn't what you would usually want to use. Instead, you will
      probably want to build a customised interface further constraining
      the interface. If the two interfaces were available within the same
      scope it would cause naming conflicts and confusion. The names of
      most functions have changed and some arguments reordered. A lot of
      functionality has also been thrown out.

    - The static member function lookup() has been removed, being replaced
      by a lookup() function of the exchange registry class OTC_EXRegisty
      which is available by calling OTC_Exchange::registry().

    - You can no longer add an agent as an observer to an individual
      instance of the OTC_Exchange class. Instead, you can subscribe to the
      exchange registry with the result that you will get announcements
      about all exchanges which since you would usually only have one
      is the same thing. The announcements will relate to the exchange
      and not to the connections managed by an exchange. Ie., an
      announcement will say that an exchange has connected to another
      process and successfully contacted the corresponding exchange for
      that group in the remote process. Type of event generated will be
      OTC_ExchangeAnnouncement. If you want to know about individual
      clients endpoints or listeners, add yourself as an observer to them.

    - Provided you kept a valid reference to a client endpoint or listener,
      you can now ask an instance of OTC_Exchange to shutdown the connection
      and drop it from the exchange.

    - Added explicit call to OTC_MPObject default constructor in OTC_Count
      copy constructor to eliminate a potentially bogus warning from EGCS
      C++ 1.1.2. Similar thing done for OTC_Resource, OTC_RCount and
      OTC_Symbol.

    - Added new special receiver name called "$AGENT". This allows one
      to deliver a message using the destination address with form
      "$AGENT!1", ie., where "1" is replaced with integer agent ID of
      the instance of OTC_EVAgent. This allows messages to be delivered
      to agents without them having a receiver bound to them. The
      destination address when received will be "$AGENT!1", ie., the
      "$AGENT" component is not dropped.

    - When an envelope if queued for delivery, list of potential recipients
      is now determined at time of delivery, not at point that envelope is
      queued with the dispatcher. Note that a consequence of this is that
      if the envelope expands to multiple recipients and one of those
      requests the dispatcher be stopped, this will not be recognised and
      the dispatcher actually stopped until all recipients have been
      received the event.

    - OTC_TcpStream has been renamed OTC_EPISMessage. No typedef or header
      file is provided for backward compatability, so if you were using
      this class direct for some reason, you will need to change your code.
      New header file is <OTC/message/epismesg.hh>. Rather than use this
      class direct, you should be using OTC_InetClient, OTC_UnixClient,
      OTC_InetListener or OTC_UnixListener. Note that environment variable
      OTCLIB_TCPSTREAMBATCH has changed to OTCLIB_MESSAGEBATCH.

    - Added OTC_EPISStream. This works in conjunction with OTC_InetClient,
      OTC_UnixClient, OTC_InetListener and OTC_UnixListener classes to
      provide a means of stream data across a socket connection instead of
      using messages as implemented by OTC_EPISMessage. You do not need to
      use the class direct, instead, interface type name is provided to
      constructor of later four classes listed above.

    - OTC_InetClient, OTC_UnixClient, OTC_InetListener and OTC_UnixListener
      have been modified so that one can select the type of interface object
      used at the socket level. The default type is "MESSAGE" which used
      OTC_EPISMessage to provide a messaging abstraction across the socket.
      The messaging abstraction gives the ability to route messages to
      other processes and beyond. It can also be used in conjunction for
      OTC_Exchange to implement a distributed service framework including
      publisher/subscriber support. This is ability is what was already
      provided in previous versions of OSE and the manner of using it is
      unchanged.

      The other style of interface now available is "STREAM". This uses
      OTC_EPISStream to provide a means of having direct control over
      data sent over the socket. Upon creating OTC_InetClient, OTC_UnixClient,
      OTC_InetListener or OTC_UnixListener with interface type of "STREAM",
      you should add yourself as an observer of that instance of the class.
      You will receive OTCEV_Connection event when socket connection has
      been established. Using remote address as event destination, you can
      send a message over the socket. By binding to the local address, you
      can receive data received over the socket connection. Only the message
      content is sent, ie., the subject etc are not sent.

    - OTCEV_Action, OTCEV_Timeout and OTCEV_Alarm have been enhanced
      so that a string description can optionally be associated with the
      event when it is scheduled. This string can be read by the recipient
      as a means of determining why the event was received. This is in
      addition to the optional agent data that can already be provided for
      mapping to agent specific event IDs. In conjunction with the agent
      data, one could have different classes of reasons for receiving the
      event with overlapping agent IDs.

    - Add delay argument to OTC_EndPoint::stop(). The default argument
      is 0, which gives existing behaviour of shutting down connection
      immediately. This left possibility that data had not been written
      out. By supplying -1 as argument, connection will only be shutdown
      when all queued messages have been written out. If a delay greater
      than 0 is supplied as argument, messages will continue to be written
      out with the socket being closed when all are written out or the
      delay specified expires. The delay is expressed in milliseconds. In
      short, if you want to ensure all messages are written out, supply
      argument of -1 when stopping and endpoint explicitly.

    - Added static member function lookupEnviron() and mergeEnviron() to
      OTC_Program class. They are wrappers around getenv() and putenv().
      The functions keep a cache of heap memory used when calling putenv()
      and by checking what the system does with it then or later can
      determine when it is safe to delete it. This gets around problems
      on some systems where you can only use static memory to putenv().

    - Added static member function expandEnviron() to OTC_Program. The
      function parses the supplied argument looking for sub patterns of
      the form $NAME or ${NAME} where NAME corresponds to the name of an
      environment variable and replaces those strings with the value of
      that environment variable with the result being returned. If no such
      environment variable is defined the sub pattern is replaced with an
      empty string.

    - Shutdown messages now logged at INFO level rather than NOTICE.

    - Added OTC_EventReaper. Needed to ensure that when exceptions
      occur while dealing with an event, that event can be destroyed when
      the stacks is unwinding. Also a useful way of having event destroyed
      when event handler function is exited without you having to do it
      explicitly. When there are multiple return points from the function,
      doubly so.

    - Added OTC_HttpDaemon and OTC_HttpServer. The classes handle accepting
      connections on a specified port, then reading and parsing a HTTP
      request and dealing with authorisation. The default implementation
      just sends back a page with details of the request, but through
      derivation you can add your own implementation to handle requests.
      The provided classes will send your response back to the HTTP client.
      In short, it is an embedded HTTP server, handling all the connection
      related issues of a HTTP server. You can do whatever you want with
      the request such as serve up files, or generate information about the
      state of your process. You could even use the request to control your
      process. The classes are contained in the new "OTC/internet" include
      directory.

    - Can now enable/disable long format log message prefixes through
      static member functions of OTC_Logger.

    - Added new optional library called OTC-TCL. This includes alternate
      version of OTC_JobQueue called OTC_TclJobQueue which uses dispatch
      mechanism of the TCL library. Compilation and installation of this
      library can be enabled by listing it in the compiler specific optional
      libraries variable in the host config file.

        EGCS1.1_OPT_LIBRARIES = OTC-TCL

      Note that you may need to first provide tcl-defns.mk and x11-defns.mk
      in the config directory for your host first so that appropriate
      include files and libraries can be found.

      To use this library, define:

        OSE_OPT_LIBRARIES = OTC-TCL

      in the initialisation section of your makefile. As usual when using
      the standard OSE libraries you must have "ose" listed in the MODULES
      variable. With this option enabled, you must also list "tcl" in the
      MODULES variable.

    - Added new optional library called OTC-PY. This includes alternate
      version of OTC_JobQueue called OTC_PyJobQueue which uses dispatch
      mechanism of the TCL library. Compilation and installation of this
      library can be enabled by listing it in the compiler specific optional
      libraries variable in the host config file.

        EGCS1.1_OPT_LIBRARIES = OTC-TCL OTC-PY

      You need to list OTC-TCL as well as OTC-PY relies upon it. OTC-TCL
      must be listed before OTC-PY in the above variable.

      Note that you may need to first provide python-defns.mk, tcl-defns.mk
      and x11-defns.mk in the config directory for your host first so that
      appropriate include files and libraries can be found.

      To use this library, define:

        OSE_OPT_LIBRARIES = OTC-PY OTC-TCL

      in the initialisation section of your makefile. As usual when using
      the standard OSE libraries you must have "ose" listed in the MODULES
      variable. With this option enabled, you must also list "python" and
      "tcl" in the MODULES variable. The order in this variable does not
      matter.

    - Added new optional library called OTC-QT. This includes alternate
      version of OTC_JobQueue called OTC_QtJobQueue which uses dispatch
      mechanism of the Qt library. Compilation and installation of this
      library can be enabled by listing it in the compiler specific
      optional libraries variable in the host config file.

        EGCS1.1_OPT_LIBRARIES = OTC-TCL OTC-PY

      Note that you may need to first provide qt-defns.mk in the config
      directory for your host first so that appropriate include files and
      libraries can be found.

      To use this library, define:

        OSE_OPT_LIBRARIES = OTC-QT

      in the initialisation section of your makefile. As usual when using
      the standard OSE libraries you must have "ose" listed in the MODULES
      variable. If your code requires "moc", you should also have "cc"
      listed in MODULES.

    - Added enableLogging() to OTC_Exception to allow logging of exceptions
      when C++ exceptions are available to be turned on from in program.
      Also provide disableLogging() and loggingEnabled().

    - Added dynamic loader for use with Python and OTC-PY library. This is
      in the "python" directory. After you have installed OSE, go to that
      directory and run:

        makeit install

      Note that you must have installed OTC-TCL and OTC-PY libraries to be
      able to use this. You also need a version of Python which can handle
      dynamic loading of DLL like modules.

      The dynamic loader has initially been tested on Caldera Linux and
      on Windows NT.

    - OTC_EVAgent::accept() now calls execute() and not filter(). The
      execute() function has been added and calls filter(). The execute()
      function was interposed so that it could be overridden in a derived
      class specifically to allow handing the event of to a separate
      thread by using OTC_EVHandler.

    - Eliminate complaints about empty statement by Visual C++ when
      OTCLIB_MARKBLOCK is being used but not cases of OTCLIB_TRACER
      in the same scope.


Changes in OSE Version 6.0pl9
-----------------------------

  + Migration Issues

    - Changes to the message routing system mean that you can't use
      programs compiled against an older version of 6.0 with programs
      compiled against this version. In other words, rebuild everything.

    - If you were sending a message with a first component of the
      address being an OTC_Exchange object and expecting the message to
      be broadcast as well as delivered to a local receiver defined
      by next component of address, you will need to change your
      code. The OTC_Exchange class will still broadcast the message
      but will not deliver it locally. To get the same behaviour, use
      the address:

	$RECEIVER!NAME

      Where "NAME" is where you are trying to send message. This will
      have same affect of broadcasting to "NAME" in other processes
      but also deliver to "NAME" locally. Using "$RECEIVER" will mean
      that message will broadcast through all OTC_Exchange instances
      and not just one you addressed. Highly unlikely anyway was using
      this anyway. :-)

    - The character "$" as the first character in an OTC_Receiver name,
      is now reserved for internal OSE use. This character is also used
      as first character of transaction IDs generated by OTC_Envelope,
      and in envelope subjects so avoid its use there as well.

    - Previously if trace messages were directed to the logger, the
      channel "trace" was used. The default is now "TRACE" instead.

    - The method OTC_Exchange::connect() no longer takes an optional
      second argument for defining remote exchange group to use. The
      group optionally defined in the constructor will always be used.

    - If using to address of "*" when sending an event, the actual to
      addresses in the header, must be prefixed by "To: ". Ie., there
      must be a single space after the colon. Previously, the space was
      optional, with any whitespace after the colon being removed.

  + Bugs Fixed

    - Added +inst_implicit_include as option for HP aCC so that template
      instantiation works correctly for OSE template classes. Manual
      template closure no longer done on OSE for this compiler as a result.

    - The check for the -frepo flag in host config compiler entries
      wouldn't work as C++COMPILER not necessarily defined at that point.
      Extra definitions would always need to be there when required and
      commented out when not wanted. Only provide -frepo definitions in
      REPO compilation environment example.

    - The OTC_RWMutex class #if checks for POSIX and WIN32 threads were
      stuffed up and so you would have got undefined symbols if you tried
      to use this class.

    - The file lib/OTC/system/otcprogram.cc wouldn't compile if _REENTRANT
      was defined. This is generally defined when POSIX or SOLARIS threads
      support is being compiled into the libraries.

    - The file lib/OTC/thread/otcrwmutex.cc wouldn't compile on Linux if
      POSIX threads was being used. This was because definition for u_int
      hadn't been seen. Need to include <OTC/OTC.h> in threads/cvmutex.hh.

    - In classinfo tools, if you had a comment for a member variable where
      the last character in comment on that line was ")", it could confuse
      the tools, with the tools belieiving it was a member function and not
      a member variable. Further processing of anything following not
      separated by a blank line would not occur until a blank line was
      reached. Similarly, could have problems where ")" was last character
      of comment for member function.

    - If you were using %p in OTCLIB_LOGFILE such that the process ID
      appeared in the file name and the process forked and the child wrote
      something to the log, it would be written to the parents log instead
      of creating a new log file.

    - When creating an OTC_MListIterator or OTC_MListModifier from either
      OTC_MList, OTC_IList or OTC_Deque, the iterator wasn't located on
      first item. Example in user guide showed use of resetFirst() anyway,
      but if you hadn't done that, it would have appeared that there was
      nothing in the collection being iterated over.

    - In messaging system sockets on server side weren't being set to non
      blocking.

    - On Win32, dispatcher would go into a tight loop when you didn't
      subscribe to any file descriptors. Same problem on UNIX may have
      resulted in main thread not being woken up if in select/poll
      when a job is scheduled from a secondary thread.

    - Performance of dispatcher on Win32 was very poor. This was because
      of code unnecessarily sending signal character over wakeup loopback
      socket. Win32 couldn't deliver character quick enough meaning that
      code would block almost straight away waiting for it. Now only send
      wakeup signal when main thread in section of dispatcher where
      blocking can occur. Same problem may have occured if using threads
      on UNIX, but doubt performance hit would have been as bad due to
      a socketpair and not true socket being used.

    - The OTC_InetAddress class wasn't converting port to network host
      order when setting up address. This mean that wrong ports were
      being used on hosts not using same endianess as network standard.
      Ie., x86 type machines were affected. Also mean't that machines
      with different endianess wouldn't talk to each other.

    - OTC_Regex::isValid() would return OTCLIB_TRUE even when there was
      an error in the pattern.

    - Library wouldn't compile against Visual C++ standard iostreams
      library. Two problems existed, derivation of iostreams wasn't done
      in a manner acceptable to the Visual C++ and Visual C++ would raise
      internal compiler errors due to friend functions in many classes.
      In the latter, just about all friend functions have been eliminated.
      The few remaining seem not to cause a problem. Hoping the streams
      changes doesn't break other compilers, especially Sun C++ 5.0, but
      can't personally test it.

  + C++ Class Library

    - Added suspend()/resume() functions to OTCEV_Shutdown. This allows
      agents which have received a pending shutdown notification to suspend
      the shutdown process. This would be useful where it is necessary that
      a set of actions must be carried out completely before shutdown, such
      as send a message off to a remote process and get an acknowledgement
      of receipt. Alternatively, if the agent is threaded, it would allow
      prcessing done by the thread to finish. The agent has to call
      resume() when it has finished doing what it needs to do. At that
      point the shutdown process will continue. Note there is no way to
      stop the shutdown process completely once it has been started, it can
      only be delayed.

    - Made all member functions of thread mutex classes const so that it
      is possible to use them as member variables of a class and have
      locking and unlocking done from const member functions of that class.

    - Added OTC_SILink for holding a OTC_String and int together in a link
      in a linked list.

    - Add to OTC_Subject, ability to say observer is interested in events
      generated against a specific subject name. The internals of the class
      have now been made thread safe on an instance basis. Does mean that
      the observers() member function has been removed. There is no good
      reason that this member function would have been used.

    - Added extra constructors and bind() methods to OTC_Receiver so that
      it is possible to bind a receiver to an agent or function but have
      an iternally generated unique name. Useful in higher level messaging
      where you want an anonymous name to which a well known name is bound
      at a higher level.

    - Added OTC_EVService, OTC_ServiceDescription, OTC_EVRegistry and
      OTCEV_ServiceAnnouncement classes. The class OTC_EVService extends
      OTC_EVAgent to have a unique name as well as being able to have user
      service names bound to it. Events can then be delivered to the agent
      based on a service names. The unique name is to allow replies to
      messages sent by the agent to be gauranteed to come back and not be
      received by multiple agents. It is possible to subscribe such that
      announcements about services becoming available or being withdrawn
      are sent to another agent. The announcement comes as an
      OTCEV_ServiceAnnouncement event class. This system is known of
      by OTC_Exchange class and if the later is used to hook up separate
      processes, service names and the corresponding unique address are
      distributed to other processes giving a means to find an agent to do
      work for you. In this case, the unique agent address is used as a
      means of delivering messages.

      Added to the above, the additional classes OTCEV_Subscription,
      OTCEV_Publication, OTCEV_Request, OTCEV_Response, OTCEV_Report and
      OTCEV_Cancellation implementing a publish/subscribe and request/reply
      style of interaction between services. That is, a service agent can
      subscribe to a service binding. Any service agent using that service
      binding will be notified of that subscription. Service agents with a
      service binding can publish events and that event will then be
      delivered to subscribing service agents. Service agents can also send
      requests to other services with those services sending replies if
      desired. Similar to publishing is the concept of reporting. It is like
      directed publishing but with events being logically grouped in a
      report. A request to cancel reports can be done once they have
      started. This all works in conjunction with OTC_Exchange so it works
      across processes.

    - Special receiver addresses have been added for delivering message
      to a receiver in local process, remote processes or both. For
      example, if wishing to deliver to "NAME" in local process use:

	theMessage = new OTC_Message("CONTENT");
	theMessage->queue("$LOCAL-RECEIVER!NAME","");

      This is actually the same as:

	theMessage = new OTC_Message("CONTENT");
	theMessage->queue("NAME","");

      If wishing to deliver to "NAME" in remote processes only, use:

	theMessage = new OTC_Message("CONTENT");
	theMessage->queue("$REMOTE-RECEIVER!NAME","");

      Note that you need to be using OTC_Exchange to set up connections
      to other processes.

      If wishing to deliver to "NAME" in both local and remote processes,
      use:

	theMessage = new OTC_Message("CONTENT");
	theMessage->queue("$RECEIVER!NAME","");

      Note that if there are two paths to another processes because two
      OTC_Exchange networks are in use, end recipient will get message
      by both network paths.

    - Special receiver addresses have been added for delivering message
      to a service name bound to an instance of OTC_EVService in local
      process, remote processes or both. For example, if wishing to deliver
      to service "NAME" in local process use:

	theMessage = new OTC_Message("CONTENT");
	theMessage->queue("$LOCAL-SERVICE!NAME","");

      If wishing to deliver to service "NAME" in remote processes only,
      use:

	theMessage = new OTC_Message("CONTENT");
	theMessage->queue("$REMOTE-SERVICE!NAME","");

      Note that you need to be using OTC_Exchange to set up connections
      to other processes.

      If wishing to deliver to service "NAME" in both local and remote
      processes, use:

	theMessage = new OTC_Message("CONTENT");
	theMessage->queue("$SERVICE!NAME","");

      Note that if there are two paths to another processes because two
      OTC_Exchange networks are in use, end recipient will get message
      by both network paths.

      Note that if you have defined a service group for the service
      name when binding it to the service agent, you must include the
      service group in the address. For example, if you bound the
      name to the service as:

	bind("NAME","GROUP");

      use:

	theMessage = new OTC_Message("CONTENT");
	theMessage->queue("$SERVICE!GROUP/NAME","");

      Ie., group name precedes service name with "/" used a separator.

      Alternative to using the above scheme is to use the service registry
      to lookup all service description objects for services with name and
      group you want and send message using full agent address given in
      the service description object.

      Note that the above only works for services which have no service
      type defined. If a service has defined a non empty service type,
      you will need to lookup the service registry to determine the address
      and use that to send the message. The above is only provided as a
      shortcut for use in simple systems.

    - Additional % tags can be embedded into the name of the log file
      for OTC_Logger defined by setting OTCLIB_LOGFILE or calling the
      setLogFile() member function of OTC_Logger. These tags are %d,
      %m, %y and %Y. They correspond to day, month and year, with %Y
      being a four digit year. The day and month will be zero padded to
      two digits. Note that as time moves on, a new log file would be
      used each day if the full date was embedded in the log file name.
      The OTC_Logger class doesn't remove old files, so you will need
      to use some external mechanism such as cron to remove files which
      are older than some amount of time.

    - In OTC_ConfigDatabase, you are now able to override logger channel
      used when error messages need to be output. This is important in
      a multithreaded environment where possible that different threads
      may use separate instances of the class at same time.

    - In OTC_Program, now cache hostname IP when generating unique IDs.
      The call was being made every time, with the call being quite
      expensive.

    - You can now override what the log channel is that is used when
      trace messages are directed to the logger. You can either set
      the environment variable OTCLIB_TRACECHANNEL or call in your
      program OTC_Tracer::setLogChannel(). This would allow you to
      specify a hidden channel, ie., starting with "@" and install a
      derived OTC_Logger to capture output and save it to a file or
      send it out on a special socket.

    - Shutdown messages now logged at NOTICE level rather than ALERT.

    - OTC_Regex and OTC_Regexp now take an extra argument in the
      constructor which allows you to specify a larger number of sub
      patterns than 9. Minimum is enforced at 9 and maximum at 49.

  + Build Environment

    - Can use +inst_auto for HP aCC if desired. Necessary to uncomment
      extra definitions in host config file entry for that compiler. Use
      of +inst_auto would result in less space consumed for all object
      files while building application as there will not be duplicated
      template implementations in object files.


Changes in OSE Version 6.0pl8
-----------------------------

  + Migration Issues

    - Changes to the message routing system mean that you can't use
      programs compiled against an older version of 6.0 with programs
      compiled against this version. In other words, rebuild everything.

  + Bugs Fixed

    - In obscure situations when it was necessary to clone an instance
      of OTCEV_Envelope, if the deflate or inflate methods for OTC_Event
      and OTCEV_Message returned zero, you could end up with a new envelope
      referencing neither an event or a message whereas the original
      envelope should have been returned.

    - If your application is running very slow it was possible that a
      message over a link was received before the event saying the
      connection was active was received. This came about because messages
      were sent as priority job and the connection setup and status events
      as a standard job, combined with the fact that a cached io event on
      a file descriptor takes precedence over a standard job. Message is
      now sent as standard job and setup events including connection active
      status as priority job. The result of the problem was that the
      OTC_Exchange class would raise an exception because it didn't know
      about the connection before it had got a message.

    - Memory leak was occuring of OTC_EPRegistry objects created by the
      OTC_Exchange class. This was because OTC_BaseActions wasn't defined
      for "OTC_EPRegistry*" to carry out reference counting.

    - If OSE_ROOT_DIRECTORY was defined in the host specific config file
      and it had a space at the end of the line, it would cause
      installation to fail when trying to install include files.

    - Having @PIC_PTRFLAGS@ in AHP compiler config when creating shared
      library was wrong. Compiler would give a warning but it wouldn't
      otherwise cause a problem.

    - EGCS 1.1 compilers on X86_CYGWIN32 have a bug in -fexternal-templates
      option which makes OSE default way of handling templates for that
      compiler not work. For that compiler on that platform, now use
      method whereby templates are expanded into every object file and
      linker used to throw out duplicates.

    - Use statement for "std" should appear after header files defining
      namespace "std" are included.

    - Made use of streambuf and ostream C++ standard conformant so that
      compilers supporting newer iostream libraries will work. Ie., not
      produce errors at compile time related to the obsolete functions
      base(), ebuf() and setb().

    - If -DENV_NOAPPLICATORS was being used to disable applicator feature
      of iterators, some template classes wouldn't compile due to header
      files not having been included. These template classes were those
      with their own inbuilt applicator functions.

    - Not all objects were being archived into library when using Sun C++.

  + Build Environment

    - Added support for template -frepo option to EGCS C++ compiler and
      Cygnus GNUPro 2.9.X C++ compilers. The -frepo option implements
      template repositories. Note however that EGCS 1.1 and Cygnus
      GNUPro 98r2 releases actually have bugs in them so this option
      can't actually be used. Works with Cygnus GNUPro 98r1 release.

    - Added compiler entry for Sun C++ 5.0. Also added targets for
      cleaning up Sun Workshop cache directories. Note that Sun C++ 5.0
      initial release has some problems which have been worked around.
      Your success in using the compiler will probably vary when it
      comes to using it on your own code.

  + C++ Class Library

    - Changed dispatcher to run priority jobs before checking for alarm
      events. Thought to be more sensible as it allows multiple priority
      jobs scheduled by a recurring alarm to be all finished before the
      next alarm. This is a requirement of changes to OTCEV_Action to
      allow UNIX cron like scheduling.

    - Extended OTCEV_Action so that when the event is scheduled, it is
      possible to supply a UNIX cron style specification giving when the
      event should be sent. The specification allows recurring events
      to be sent. For example, following results in event being sent
      every minute.

	OTCEV_Action::schedule(theAgentId,"* * * * *".);

      The following send the event each day at 12:30 and at the same
      time but on only Monday to Friday.

	OTCEV_Action::schedule(theAgentId,"30 12 * * *".);
	OTCEV_Action::schedule(theAgentId,"30 12 * * mon-fri".);

    - Event and message inside an instance OTCEV_Envelope now are held
      in a separate reference counted content class. This eliminates the
      possibility of multiple copies of inflated or deflated event. We will
      always have all envelopes sharing them unless cloning of event
      actually resulted in new instance of the event being created.

    - When notifying observers of a class derived from OTC_Subject, you
      can now say as what type of job the event is delivered as. Ie.,
      priority, standard or idle job. The default is still a standard job.

    - If you are on Solaris and you are using shared libraries for OSE
      and perhaps your own code, if you set the environment variable
      OTCLIB_EXCEPTIONSTACKTRACE you can have a stack trace accompany the
      location information generated for an OSE exception. The information
      about functions will only be correct for the cases where the code
      for the function being called was located in a shared library. Thus
      if you are statically linking in libraries you are out of luck. You
      can also generate this stack trace by calling the static member
      function OTC_Exception::dumpStackTrace().

    - Rearranged base classes for OTC_EndPoint and OTC_EPListener so
      that they didn't give incorrect warnings about use of OTC_Resource
      when OTCLIB_RESOURCEWARNINGS was defined as an environment variable.

    - The function OTC_Program::uniqueId() now takes an argument indicating
      whether short or long format IDs should be generated. The short format
      aren't strictly unique within the life of a program. This could only
      be a problem though if the application generated so many IDs that it
      created more than can be represented as an int. Safe to use if you
      know this is unlikely to be the case. The default type is the long
      format. Arguments of OTCLIB_ID_SHORT_FORMAT and OTCLIB_ID_LONG_FORMAT
      are allowed. Also, the FQDN hostname in the ID is now replaced with
      IP number as single number.

    - Changes made to interface/implementation pragmas for GNU C++ and
      derivatives. The changes mean that compilers prior to GNU C++ 2.6.0
      are no longer supported.


Changes in OSE Version 6.0pl7
-----------------------------

  + Bugs Fixed

    - Performance of hash based collections would degrade when the
      population was kept about the same but there as a continual series of
      additions and deletions. The insertion/deletion algorithms internal
      to OTC_HashTable have been changed to avoid the problem. Note though
      that this change means that the resultant contents of the hash vector
      will be different to what it was, meaning that an ObjectStore
      database can't be migrated from an earlier patch revision to this
      patch revision as the new algorithm will not be able to locate stuff
      in an older hash vector as it will not be looking in the right spot
      anymore.

  + C++ Class Library

    - Added OTC_StopWatch and OTC_TimeClock classes. These can be used
      to carry out performance timing on code within an application. Macros
      are provided to use the classes which can be conditionally compiled
      into code when OTCLIB_TIMING preprocessor symbol is defined.

  + Build Environment

    - Define environment variable OTCLIB_LOGEXCEPTION when running test
      programs in "check" module. This is to ensure that exception messages
      are displayed and thus if programs die it can be seen that this
      is the case.


Changes in OSE Version 6.0pl6
-----------------------------

  + Bugs Fixed

    - Symbols to identify compiler weren't being defined when Sun C++ 4.X
      was being used with Versant. This mean't that exception handling
      function prototypes (set_terminate()) weren't being seen by compiler
      and mksrc compilation was thus failing.

    - Trace code existed in OTC_JobQueue::wakeup(). This function is
      called by signal handlers and thus corruption could occur or in
      the case of threads a deadlock on system resource locks.

    - The class2mml program was generating files with ".3" extension
      instead of ".mml".

    - Builds without thread support enabled don't work on Win32 platform
      with Visual C++ and possibly other native Win32 compilers.

  + C++ Class Library

    - Prototype and cast changes to allow compilation on NetBSD.

    - Closure of library not done for DEC C++ properly. Left underscore
      out of pragma name.

  + Installation

    - Added X86_NETBSD config directory.

  + Documentation Tools

    - HTML can now be produced directly. Ie., there is a class2html
      and info2html program. Both have -link option with similar
      operation to that option as it appears in man2html. Note that
      you may need to run the tools twice as the files being linked
      to must exist.


Changes in OSE Version 6.0pl5
-----------------------------

  + Bugs Fixed

    - If a duplicate hash key occurred for different items in OTC_HMap
      and OTC_HSet, an internal assertion failure would occur.

    - If "purify" and "purecov" were both specified in MAKEIT_OPTIONS,
      "purecov" was taking precedence rather than support for both
      being compiled into the executable.

    - Scheduling of an idle job from separate thread to the dispatcher
      thread could result in corruption of idle job queue.

    - The OTC_Pathname class used getwd() in preference to getwd() on
      all platforms except perhaps Solaris/SunOS. Use of getwd() wasn't
      thread safe. The getcwd() is no always used in preference to getwd().

    - The class OTC_BitSet wasn't working properly when the bounds
      were such that more than 2048 bits were need to hold the bitset.
      In particular, bits above the 2048 range were mapped back onto
      the lowest 2048 in error.

    - The OTC_UnixClient class was ignoring user provider interface adapter.

  + Build Environment

    - It is now possible to override the extension used on programs
      generated with Purify/Quantify/Purecov support. This is done by
      setting PURIFY_MEMEXT, QUANTIFY_MEMEXT and PURECOV_MEMEXT. The
      default if these are not explicitly set is "pure". Note that you
      still can only generate applications with support for one at any
      particular time. Ie., you need to change MAKEIT_OPTIONS to include
      "purify" rather than "quantify" if you want to move from one to the
      other. The only exception is that "purecov" can be listed in
      MAKEIT_OPTIONS at the same time that "purify" is being used. In this
      case, although Purecov support is included, it is treated as if just
      Purify was used and thus PURIFY_MEMEXT defines the extension.

      Note that if you change the extension, the target name you use to
      generate the applications will change. For example, if PURIFY_MEMEXT
      is set to "purify", to generate all programs with Purify support, you
      use "programs.purify". To Purify a single program called "name", use
      the target "name.purify".

    - Explicit compiler entries provided for GNU EGCS C++ in compiler.mk.
      Sample compiler configuration provided for X86_LINUX.

  + C++ Class Library

    - Added OTC_Condition class. This captures a boolean value as a way
      of determining whether a condition has been satisfied. A derived
      class can override the evaluate() method to set the condition flag
      or an external class can set it directly. The condition class is
      not internally thread protected.

    - A new OTC_Dispatch::run() function is added which takes as argument
      a pointer to a OTC_Condition. This can be used as a way of prematurely
      causing the dispatcher to return when some condition is satisified.
      For example, when a timer has expired or a set number of jobs have
      executed. The evaulate() method of OTC_Condition will be called after
      each job has been executed. A derived version of OTC_Condition can
      redefine evaluate() to determine if the condition has been satisifed
      and call set() of OTC_Condition.

      This mechanism can be used as a way of conditionally having further
      jobs be executed, pending some condition, from inside a handle for
      an event or in the execute() function of a job. The result is a poor
      man's multithreading system using jobs/events.

    - Private aspects of OTC_JobQueue made accessible through protected
      member functions to allow derived classes to make use of base class
      implementation without having to be concerned about thread locking
      issues nor knowing about specific implementation details.


Changes in OSE Version 6.0pl4
-----------------------------

  + Bugs Fixed

    - If use of Purify or other memory checking program was enabled
      and you had a program "one.cc", the target "one.pure", "one.sent"
      etc, weren't working.

    - Separate iterators associated with OTC_Deque, OTC_MList and OTC_IList
      wouldn't compile in all circumstances because some compilers were
      creating temporary objects of type OTC_DequeHI which mean't that
      copy constructors needed to be public.

    - Extraneous "const" in OTC_MList and OTC_IList cause compilation
      problems with some compilers.

    - Double semicolon in OTC_Exchange caused problems with HP AC++.

  + C++ Class Library

    - Restored pre 6.0 behaviour for non threaded environment, where
      OTC_Dispatcher::run() and OTC_Dispatcher::dispatch() would return
      with value of 0 if there was no possibility of any more events being
      generated.

      Note that when multithreading support is compiled into the library,
      OTC_Dispatcher::run() will not return even if there is no indication
      that anything else can happen. This is because it will wait for the
      possibility that an alternate thread will schedule something to do
      or subscribe to an event source.

      When multithreading support is compiled into the library and you
      are calling OTC_Dispatcher::dispatch(), you can supply the argument
      OTCLIB_THREADS_DONT_WAIT if you don't want the dispatcher to wait
      for the possibility that an alternate thread might schedule something
      to do or subscribe to an event source.

    - Code implementing dispatcher functionality which was in
      OTC_Dispatcher has been moved into OTC_JobQueue. This was done to
      allow derived version of OTC_JobQueue to better be able to
      modify certain behaviour. Only significant result of this is
      that the OTC_Dispatcher::initialise(OTC_JobQueue*,void(*)())
      function has dissapeared. This is because the OTC_JobQueue class
      now accepts the pointer to a function supplied as a second argument
      in its constructor.


Changes in OSE Version 6.0pl3
-----------------------------

  + Bugs Fixed

    - The OTC_String::readFile() function was setting "fail" bit as well
      as "eof" bit in most cases.

    - Microsoft C++ does not like the value '0' as an argument to
      OTC_String::operator[](). Change code to use "u_int(0)".

    - Missing "endif" in sample config file for X86_LINUX.

    - Determination of if gethostname() prototype should be defined was
      stuffed up.

    - If using ObjectStore, the OTC_MutexReaper class derives from
      the ObjectStore basic_undo class. This ensures that the reaper
      objects are destroyed and mutex unlocked when ObjectStore
      exception occurs and ObjectStore exceptions don't use native
      C++ exception support.

    - When "sh" module was being used, all ".sh" files were being
      converted to executable programs and not just those listed in the
      PROGRAMS variable. This behaviour was contrary to what the
      documentation was saying should happen, ie., that only those listed
      in PROGRAMS should be made into executable programs.

    - The ObjectStore program "osrm" wasn't explicitly run from bin
      directory of $OS_ROOTDIR.

    - Code for detecting -k option for GNU Make and handling subdirectory
      traveral to honour that, didn't work if the long options
      --no-print-directory or --warn-undefined-variables were used.

  + Build Environment

    - In "install" module, when executable files are being installed,
      it is now possible to define a prefix and/or suffix which should
      be placed on files when they are installed. This is done through
      variables BINPREFIX1, BINSUFFIX1, BINPREFIX2, BINSUFFIX2,
      BINPREFIX3, BINSUFFIX3, BINPREFIX4 and BINSUFFIX4.

    - When ObjectStore commands are run, environment variables to be
      defined within the environment of that process can be provided
      within the OS_CMDENV variable. For example, on Solaris, you
      may want to say:

	OS_CMDENV := LD_LIBRARY_PATH=$(OS_ROOTDIR)/lib:$(LD_LIBRARY_PATH)

      so as to avoid users having to have LD_LIBRARY_PATH include the
      correct version of ObjectStore library directory for shared
      libraries required by executing process.


Changes in OSE Version 6.0pl2
-----------------------------

  + Bugs Fixed

    - The OTC_Date::previous() and OTC_Date::following() functions were
      giving incorrect results most of the time. These functions are in
      turn use by the firstDayOfWeek(), lastDayOfWeek() and %U format
      directive in asString() for both OTC_Date and OTC_Time.

    - The info2mml program was using ".3" for extension and not ".mml".

    - GNU C++ 2.8.0 supports exceptions by default. Compiler entry didn't
      have this as being the case and multiply defined symbols occured.

    - When installing cross compilation configuration, not all config
      files were being installed, and those that were weren't necessarily
      going to the correct place.


Changes in OSE Version 6.0pl1
-----------------------------

  + Bugs Fixed

    - Extraneous "const" in OTC_Deque class resulted in bad warning
      messages on some C++ compiler.

    - If port 0 is provided to OTC_InetListener to indicate an anoynmous
      listening port, the true address of the created socket wasn't queried
      in order to allow the actual port number used to be accessable.

    - In include/OTC/collctn/linkiter.hh, a forward declaration existed
      for OTC_Link. The same file did a down cast from OTC_Linkable to
      OTC_Link. Some newer compilers are complaining that this isn't
      portable because OTC_Link isn't a complete type. The header file
      for OTC_Link is included instead.

    - Missing semicolons on lines of code relating to ObjectStore in
      lib/OTC/text/otcrstring.cc.

    - Class2man wasn't generating manual pages for template classes
      unless -nested option was provided.

    - When reading from stream in OTC_String, if EOF was encountered
      it was being put back onto stream. This was usually okay as
      stream implementations generally don't allow a character to be
      put back once EOF had been encountered. An exception seems to
      be strstream in Sun C++ 4.2.

    - Apropos index generated on Solaris for class2man generated
      manual pages included troff commands.

    - Class2man wasn't handling enum which all appeared on a single
      line.

    - OTC_String::readFile() stopped reading when an embedded 0xff
      character was found in the stream.

  + C++ Class Library

    - Added to OTC_Date the methods isFirstDayOfMonth(), isLastDayOfMonth(),
      isFirstDayOfYear(), isLastDayOfYear() and isWeekDay().

  + Build Environment

    - Support for HP aC++.

    - Support for GNU C++ 2.8.X.


Changes in OSE Version 6.0
--------------------------

  + Migration Issues

    - You cannot use config files from a prior version of OSE. You
      will need to look at newer config files and work out what you
      need to translate over from your old files.

    - The default value for an optional argument in the following
      functions has changed:

	OTC_Dispatcher::schedule(OTC_Job*, int theType)
	OTC_Event::queue(int theType)
	OTCEV_Action::schedule(int, int theType)

      The optional argument "theType" previously had a default value of:

	OTCLIB_IDLE_JOB

      The default value is now:

	OTCLIB_STANDARD_JOB

      The old value of OTCLIB_IDLE_JOB mean't that the job would only be
      executed when the dispatcher had nothing else to do. The new value
      of OTCLIB_STANDARD_JOB gives the job similar priority to i/o events.

      If you had not explicitly provided the argument yourself, the
      behaviour of your program may change. To pinpoint where in your
      code you may need to now explicitly supply an argument the value
      OTCLIB_IDLE_JOB, define the preprocessor symbol:

	OTCLIB_60000_MIGRATION

      This will remove the prototypes with default arguments, resulting
      in the compilation failing at those points where you had been relying
      on the default argument. You can then insert in as the optional
      argument, the value OTCLIB_IDLE_JOB if appropriate.

    - Thread support for VxWorks is no longer provided. If you can provide
      code for the VxWorks platform to implement OTC_CVMutex and OTC_RWMutex
      and also code for thread creation and exit in OTC_ThreadPool then it
      can be added and will be supported once again. In the mean time,
      all VxWorks specific thread code has been removed.

  + Bugs Fixed

    - If an event contained another event, in a multithreaded environment,
      destroying the outside event would cause the thread to block when
      destroying the inside event.

    - When dispatcher was obtaining file subscription information from
      OTCEV_IOEvent using the subscriptions() member function, the mutex
      in OTCEV_IOEvent wasn't being unlocked, but was being locked a
      second time. In a multithread environment, this mean't that if
      any thread beside the thread running the dispatcher used the
      class OTCEV_IOEvent in some way, that thread would block.

    - If a thread other than the thread running the dispatcher tried
      to schedule a job it would deadlock with the dispatcher thread
      if the dispatcher thread was blocked in the select/poll call.

    - In reality, use of threading in combination with the dispatcher was
      broken. As well as the above actual bugs, changes in the design
      of some bits of the dispatcher were made to avoid deadlock and
      aliveness issues.

    - On Win32, dispatcher would not correctly identify a bad descriptor,
      in this case a descriptor which was not a valid socket. Result was
      that it would continually loop around on the select call. This
      was because errno was being checked rather than WSAGetLastError(),
      but then WSAGetLastError() wasn't returning the documented error
      code for this situation either, returning WSANOTINITIALISED rather
      than WSAENOTSOCK. Check for both as well as WSAEBADF.

    - More general error with checking for bad descriptors when select()
      was being used. Code was using index into descriptor array, rather
      than actual descriptor. Might account for unexpected WSANOTINITIALISED
      error on Win32.

    - OTC_Logger class was using localtime(), but wasn't using reentrant
      versions when one was available and threads were being used.

  + Installation

    - New variables added into config files. You cannot copy config
      files from an older version of OSE. The new variables relate
      to how to manipulate library archives and build shared libraries.
      This knowledge was previously in include/makeit/lib.mk which
      made it hard to customise if necessary.

    - Support for X86_BSDI and X86_FREEBSD platforms added.

    - Running the test programs is now a lot easier. Just go into the
      "tests" directory and run "makeit check". Note that you need to have
      installed GNU Make in the appropriate place and have the correct OSE
      "bin" directory in your PATH. That is, running the tests works off the
      installed version of OSE. The test directories do not contain the
      source code, it still lives in the various directories underneath
      "lib". Instead, the remote source directory feature of makeit is
      used.

  + Build Environment

    - User is now permitted to set PIC_CPPFLAGS, PIC_CFLAGS, PIC_C++FLAGS,
      PIC_LDFLAGS and PIC_LDIBS if required. Project versions of these are
      also provided, they are prefixed with "PROJECT_".

    - If combining shared libraries, it is possible to suppress actual
      generation of shared library in subdirectories. This is done by
      defining "suppress_library_generation" in SHLIB_OPTIONS. This
      is generally useful to avoid generation of shared library in
      subdirectory failing due to undefined symbols, those symbols
      only being available when combine of shared libraries is being
      done. This option can also be used with the "combine" module
      if doing multi level shared library combines.

    - Previously, if using the "combine" module, the default was not
      to create an archive of shared objects. This mean't if doing multi
      level shared library combines, you had to indicate by setting an
      option in CLOSURE_OPTIONS that you wanted this library created.
      The option was "export_shared_objects". The option no longer exists
      and the archive will always be created.

    - On Win32, when libraries are installed, they will no longer have
      a 'lib' prefix.

    - On Win32, now possible to generate Win32 DLLs. The OSE library
      itself, can be generated as a DLL when threading is also being
      used. If DLLDIR variable is defined, when installed DLL, it
      will be put in the directory specified by DLLDIR rather than
      in the directory specified by LIBDIR. The import library will
      still be placed in the directory specified by LIBDIR. DLLDIR
      exists so you can install into standard DLL locations or to
      somewhere which will be in your PATH, ie., where executables
      are placed. The DLL versions of the OSE libraries will be put
      in "$(OSE_HOME)/bin". This is where non host specific programs
      are put. This is not the ideal position and will not work if
      you happened to have Win32 for different architectures, however,
      it is the only place you might have in your PATH.

    - Added Java module. The module supports javadoc, creation of zip
      files and Java Native Methods. Must have "zip" program if you
      want to use zip feature. Note that the "clean" target doesn't
      remove the classes directory, use the "distclean" target to
      remove it. You can change the destination directory for generated
      class files, zip and doc file by setting "MKJAVA" variable. The
      "install" module knows about the Java module. To have class files and
      zip file installed, define "CLASSDIR" variable to destination. To
      install javadoc generated HTML files, define "DOCDIR" to destination.
      You need to have "install" listed in "MODULES" if you want
      installation for Java stuff to work.  If using Java Native Interface
      and "shlib" option in MAKEIT_OPTIONS, there currently isn't any way
      to disable the generation of a static library which would be
      desirable given that only the shared library is of interest. For
      examples on use of Java see "examples" directory.

    - On SunOS, if wanting to define object files for code files to
      be placed into the static portion of a shared library, ie.,
      in the ".sa" file, the names of the source files were listed in
      the STATIC variable. This variable is now obsolete, use STATICSRC
      instead.

    - Extension used on shared library in makeit subdirectory is that
      which would be used by the operating system. That is, "lib.so" is
      no longer necessarily what the shared library will be called.
      You can no longer have an explicit dependency on "lib.so" as it
      is created as the side effect of creating "pic.a". Make your
      dependency on "pic.a" instead.

    - The "combine" module was updated so that building of libraries
      in subdirectories and the combine directory didn't trigger
      unnecessary traversals into subdirectories.

    - The "combine" module is disabled if there is source files
      in the combine directory and the source would otherwise be
      compiled into object files or programs.

    - The option in MAKEIT_OPTIONS called "no_local_closure" no longer
      exists. This option only applied to Sun C++ CAFE compilers. The
      option disabled performing template closure on static libraries
      in normal directories. If you still want to be able to disable
      this feature, you should apply some sort of check in the config
      file where the compiler information is defined and modify the
      AR_ARCHIVE variable as appropriate.

    - Makeit now picks up different variants of SGI C++ better, ie.,
      different ABIs, eg -32, -64 and -n32.

  + C++ Class Library

    - A new job type has been added in the dispatcher. This is given
      by the value OTCLIB_STANDARD_JOB. A job with this priority will
      be given similar standing to i/o events.

    - The default for the optional "int" argument to
      OTC_Dispatcher::schedule() member functions has been changed. The
      value is now OTCLIB_STANDARD_JOB instead of OTCLIB_IDLE_JOB.

    - The default for the optional "int" argument to
      OTC_Event::queue() member functions has been changed. The value is
      now OTCLIB_STANDARD_JOB instead of OTCLIB_IDLE_JOB.

    - The default for the optional "int" argument to
      OTCEV_Action::schedule() member functions has been changed. The value
      is now OTCLIB_STANDARD_JOB instead of OTCLIB_IDLE_JOB.

    - Added OTC_IVLink class. This is a derived version of OTC_Link for
      holding a "int" key and "void*" item.

    - Added OTC_SVLink class. This is a derived version of OTC_Link for
      holding a "OTC_String" key and "void*" item.

    - Added OTC_Subject class. This provides for a means of agents saying
      they are interesting in observing changes in a subject. The subject
      class will derive from OTC_Subject. Agents can then add themselves as
      observers. The derived subject class can then broadcast notifications
      of changes using event classes to all observers.

    - The OTC_EVAgent class no longer derives from OTC_MPObject. The
      fact that it did caused conflicts if a derived class were derived
      from OTC_Resource and thus OTC_MPObject.

    - Added OTC_FNAgent class. This provides a means of having events
      delivered to a standard function. For simple stuff, avoids having
      to write special agent class if there is only one instance.

    - The OTC_Dispatcher::initialise() function now optionally takes a
      function to be called after each job execution. This optional
      argument was previously only available when explicitly providing
      an alternate job queue.

    - Added member function OTC_Event::queue(OTC_EVAgent*,int) for
      orthoginality with the deliver() member function.

    - Added member function OTC_Event::deliver(void(*)(OTC_Event*)) and
      OTC_Event::queue(void(*)(OTC_Event*),int). These allow delivery or
      queuing of event to a standard function.

    - Added classes OTC_FuncStream and OTC_FuncBuf. These allow for data
      accumulated in a stream to be passed off to a standard C function.

    - Added class OTC_VFuncBuf. This allows for data accumulated in a stream
      to be passed up to a derived class through a virtual function. No
      companion stream class is provided, you will need to use this with
      ostream directly.

    - Default size of buffer in OTC_LogStream/OTC_LogBuf changed from 256
      to 1024. This means that when you create an instance of OTC_LogStream
      you can rely on the default buffer and do not have to provide your
      own.

    - Use of OTC_Tracer and the macros OTCLIB_TRACER and OTCLIB_MARKBLOCK
      is now safe in a multithreaded environment provided that OTCLIB_TRACER
      is used in conjunction with OTCLIB_MARKBLOCK. Note that as there is
      only one set of variables for recording trace indent level, indenting
      when multiple threads are active will not be correct. You should turn
      off indenting using the environment variable OTCLIB_NOTRACEINDENT,
      when using multiple threads. You should also direct the trace output
      to the logger and enable long format message prefixes. Ie., set the
      environment variable OTCLIB_LOGTRACE and OTCLIB_LOGLONGFORMAT.
      Doing this will result in thread ids being displayed on each line
      of output and you can distinguish output from different threads.

    - When you specify a file for trace output using OTCLIB_TRACEFILE,
      the file will only be created at the first point that it is
      required. This means that if OTCLIB_TRACEFILE is set, but the
      trace level was such that nothing came out, the file will not be
      created. Note that since the creation of the file can happen
      at any point, an absolute name for the file should be used in
      case the program changes the working directory.

    - Added OTC_String::trim(char). Allows instances of the specified
      character to be trimmed from start and end of the string.

    - Added to OTC_String the member functions rtrim(OTC_BitSetC const&),
      ltrim(OTC_BitSetC const&) and trim(OTC_BitSetC const&), for trimming
      of any characters in the specified char set.

    - Added to OTC_BitSetC, the functions reset(OTC_Range const&),
      set(OTC_Range const&), complement(OTC_Range const&) and range()

    - The symbol OSE_IMPLEMENT_TEMPLATES, which was replaced with
      EXPAND_TEMPLATES, is no longer kept for backwards compatability.

    - The OTC_Hash, OTC_Rank and OTC_Copy classes have been added. These
      encapsulate global functions for hashing, ranking and copying memory.
      Previously, this functionality was supplied by otclib_hash(),
      otclib_rank() and otclib_memmove() functions. The old functions are
      still kept for backward compatability. The new classes are
      automatically included when <OTC/OTC.h> is included. Note that
      functions do not check for null pointers when non zero lengths are
      supplied.

    - Added OTC_BitSet class. This allows range of values for bitset to
      be defined in the constructor.

    - If you use OTCLIB_THROW to throw exceptions derived from OTC_Exception
      and the file and line number weren't set in the OTC_Exception class
      because you did not pass them to the constructor via the constructor
      of your derived class, the OTCLIB_THROW macro will result in them
      being set to the line the OTCLIB_THROW macro was used.

    - The OTCERR_OutOfMemory class can now take file and line number
      information so it can be determined where the exception was raised.

    - New macro OTCLIB_ASSERT_M() added. This is explicitly for checking
      result of operator new() or malloc(). If the assertion check fails,
      an exception of type OTCERR_OutOfMemory is generated. The message
      produced by the logger will include file and line number information.
      The macro OTCLIB_ASSERT_M() should be used instead of OTCLIB_ASSERT()
      when checking memory allocations. Note that NDEBUG does not result
      in this macro being disabled.

    - Whenever new or malloc is used in OSE, instead of using OTCLIB_ASSERT()
      to check whether valid memory was returned, OTCLIB_ASSERT_M() is now
      used. This will result in an OTCERR_OutOfMemory exception even if a
      new_handler() function wasn't supplied to raise one. Note that in
      C++ standard, operator new() will always raise an exception anyway.
      However, not all C++ compilers have that feature yet.

    - Added OTC_Receiver class. This allows a name to be bound to an agent
      or global function and that name used to deliver events. Corresponding
      queue() and deliver() functions are added in OTC_Event to allow
      delivery of events using the name.

    - Added OTCEV_Shutdown event class. Agents can subscribe to this
      event. The idea being that when a process is to shutdown, all agents
      interested can be notified so they can do any necessary cleanup.

    - Added basic message routing system which allows for events to be
      sent between processes. Lots of goodies here. All classes located in
      "include/OTC/message".

    - If ENV_CXXSTDLIB is defined as a preprocessor variable, the library
      will include streams header files as <iostream> rather than using
      <iostream.h> and define "using namespace std" to push them into
      global scope. This may be required if you want to use STL, but the
      implementation requires you to use streams header files using new
      style includes.

    - Classes OTC_MListIterator and OTC_MListModifier can now be used
      on OTC_Deque and OTC_IList as well as on OTC_MList.

    - Certain implementation functions of OTC_Deque and OTC_List were
      protected rather than private. They have been made private. No
      good reason was thought of as to why they were protected.

    - OTC_List now provides the functions replaceFirst(), replaceLast()
      and replaceItem(). These are more efficient than removing an
      item and the inserting a new item as the same position. They
      are also better than using assigment to change the value of an
      item as if the item is a pointer and defines OTC_BaseActions,
      when assignment is done, the OTC_BaseActions methods aren't
      called. This could result in incorrect manipulation of reference
      counts etc, so replace functions should be used instead of
      assignment to a specific item.

    - Added OTC_AVLLinkNode::setLink() so that link in existing node
      can be changed.

    - Added OTC_HashTable::replace() so that existing item in existing
      entry can be changed.

    - Optional flag can now be provided to add() function in keyed
      collections indicating whether operation will perform add only,
      or whether it will replace an existing item. Where a key is used
      to select an item and the item is modifiable, using this replace
      feature is safer than assignment to the item as assignment
      gets around the use of OTC_BaseActions which could stuff up
      reference counting where the item was a pointer. The value of
      the extra argument is OTCLIB_ADDONLY or OTCLIB_REPLACE. The
      classes affected are OTC_HMap, OTC_TMap, OTC_HSet and OTC_TSet.

    - The OTC_BitSetC class has been renamed to OTC_CBitSet. The old
      name survives as a macro which redirects to the new name.

    - The OTC_Vector class has been renamed to OTC_Array. A macro has
      been provided to map OTC_Vector to OTC_Array. This backward
      compatability will dissappear in a future version as the name
      OTC_Vector name is to be reused in implementing vector/matrix
      classes. Thus, you should change use of OTC_Vector to OTC_Array. The
      header file for OTC_Array is <OTC/collctn/array.hh>. The updated
      OTC_Array class provides the ability of being able to have a lower
      bound other than zero. New constructors have been added to permit the
      definition of the lower bound.

    - Added to OTC_Array class constructors which take a value to which
      intialise elements in the vector. Similar resize() member functions
      have been added.

    - Added to OTC_Array class the assign() member function for replacing
      the complete array with something else.

    - Added to OTC_Array class a number of different replace() member
      functions for replacing specific elements within the array with
      another value.

    - Added to OTC_Array class item() member functions. This can be
      used instead of array style notation for accessing elements in
      the vector.

    - Added to OTC_Array class apply() member functions. This allows
      OTC_Worker, OTC_Visitor, OTC_PairWorker and OTC_PairVisitor
      classes to be applied to elements in the vector. For pair variants
      the index position of the element is passed as the key.

    - Added OTC_Applicator and modified OTC_Worker, OTC_Visitor,
      OTC_PairWorker and OTC_PairVisitor to derive from OTC_Applicator.
      The OTC_Applicator class defines out of line implementations for
      start() and finish() so that it is not mandatory for a derived
      class to define implementations.

    - More statistics available from OTC_Pool. This includes number of
      blocks allocated and number of elements free.

    - The number of pools used in OTC_CommonPool can now be defined by
      setting the environment variable OTCLIB_COMMONPOOLS. Pools will
      start at 8 bytes and go up in 8 byte increments. If the value is
      zero or a negative value, the common memory pools will be disabled.
      Number of pools defaults to 8 if this environment variable isn't
      set, ie., largest pool is 64 bytes. Large numbers of pools are not
      recommended. If you do specify a large number, keep in mind that once
      you get above the default block size, there will only be one element
      in each block. You will need to thus define explicitly the block size
      for that pool. Also, since use of the common memory pools is a
      conscious decision, it is unlikely that large objects (>256) will be
      using them anyway.

    - Added OTC_Dispatcher::wakeup(). What it allows you to do is to
      force a return from the select/poll call if the dispatcher thread is
      blocked within the call. A call is made to this new function from
      events sources when a subscribe/unsubscribe or start/cancel type
      request happens or when a job is scheduled as well as from signal
      handlers. This will cause the dispatcher thread to notice a new
      request without it being delayed to whenever the select/poll function
      would have returned. Note that if called from a signal handler, you
      must supply value of 1 as argument and 0 otherwise. The OTCEV_Signal
      class no longer has its own socketpair but uses this new function.
      There shouldn't however be any need to call it, as existing event
      framework calls it when necessary.

    - Added accept(OTC_Event*) and filter(OTC_Event*) to OTC_EVAgent.
      Instead of being delivered to handle(), events will be given to an
      agent by calling accept(). By default accept() will call filter() and
      the filter() will call handle(). The filter() function might be
      redefined in a derived class to filter out special events and convert
      them into separate function callbacks. You should still be redefining
      handle() to deal with any events left over. The accept() can be
      overridden if you need to check for special events which should
      be dealt with before any filtering. For example, a derived accept()
      function would be made to look for OTCEV_Shutdown events.

    - Added OTC_RWMutex, a reader/writer lock, and OTC_CVMutex a condition
      variable mutex.

    - When an OTCEV_IOEvent is created to notify an agent that an event
      of interest has happened on the file descriptor, the subscription
      will be suspended for the lifetime of the event object. That is,
      for the time that the event object exists, the select/poll call
      will not check for that type of events on the file descriptor.
      Thus, the event object should be destroyed after, and only after
      you have just finished actions in response to that event. This
      behaviour is required so that the dispatcher doesn't keep generating
      the same event in a multithreaded system.

    - Added OTC_ThreadPool class. This provides a way of introducing
      multithreading into the handling of events. The constructor for
      OTC_ThreadPool takes three values. These are the number of threads to
      run to handle events, a maximum queue size and a queue threshold
      which will be used to determine when the input queue is becoming
      overloaded. The class can be used by providing instances of the
      OTC_EVCallback class along with an event so a thread knows who to
      give the event to. Alternatively, you can use the OTC_EVHandler
      class which handle all the callback stuff so that the events can
      be passed back to an instance of OTC_EVAgent in the context of
      a thread.

    - The OTC_Logger class will now insert Win32 process IDs and thread
      IDs in long format prefix. The name of the log file can also use
      the hostname and process ID keys, ie., %h and %p.

    - Added new macros for check precondition failures. These are
      OTCLIB_ENSURE_FN(...) and OTCLIB_ENSURE_FN_W(...). They take
      three arguments instead of two. The arguments in order are the
      condition to be checked, the function in which the check is being
      made and the description. These thus allow the function name
      to be separate from the description. All uses of OTCLIB_ENSURE
      in the OSE library have been changed to these new versions.
      The OTC_PreconditionFailure class was modified to optionally
      take the function information.

    - The dispatcher will now automatically unsubscribe a bad file
      descriptor if it detects one. It will still also send out a
      OTCEV_IOEvent with OTCLIB_POLLNVAL to the subscriber. When
      the recipient receives that event, the file descriptor would
      already have been unsubscribed.

    - Added shallow copy mechanism to OTC_Array. That is, when creating
      a copy of a vector, one can provide the extra constructor argument
      of OTCLIB_SHALLOWCOPY. The new array will be an alias for the old,
      ie., will reference the same internal data. The sharing will be
      split if one is resized or assigned to. The point of shallow copying
      is to make returning an array as an object from a function more
      efficient when the first array was created on the function stack,
      normally a complete new copy of the array would be created on it
      being returned as an object.

    - Iterators/PairIterators are now available for OTC_Array. These are
      based on the new OTC_VecCursor and OTC_IdxVecCursor classes. With
      the PairIterator version, the key gives access to the index position
      of the item in the array.

    - When scheduling an action, ie., OTCEV_Action, you can now optionally
      supply user data to be given back with the OTCEV_Action event class.
      The user data is only an integer, however, this is generally
      sufficient to allow you to use action IDs which are relevant to the
      context of the receiving agent. By using small fixed values rather
      than having to remember the automatically generated ID, you can use a
      switch statement or array to determine what should be done when an
      action object is received. Note that the cancelAgent() function now
      optionally takes the agent data, allowing you to kill all pending
      action events for an agent with the specified agent data. To
      determine if a specific action is still pending, you need to still
      use the automatically generated action ID.

    - When scheduling a timeout, ie., OTCEV_Timeout, you can now optionally
      supply user data to be given back with the OTCEV_Timeout event class.
      The user data is only an integer, however, this is generally
      sufficient to allow you to use timeout IDs which are relevant to the
      context of the receiving agent. By using small fixed values rather
      than having to remember the automatically generated ID, you can use a
      switch statement or array to determine what should be done when a
      timeout object is received. Note that the cancelAgent() function now
      optionally takes the agent data, allowing you to kill all pending
      timeout events for an agent with the specified agent data. To
      determine if a specific timeout is still pending, you need to still
      use the automatically generated timeout ID.

    - When scheduling a alarm, ie., OTCEV_Alarm, you can now optionally
      supply user data to be given back with the OTCEV_Alarm event class.
      The user data is only an integer, however, this is generally
      sufficient to allow you to use alarm IDs which are relevant to the
      context of the receiving agent. By using small fixed values rather
      than having to remember the automatically generated ID, you can use a
      switch statement or array to determine what should be done when a
      alarm object is received. Note that the cancelAgent() function now
      optionally takes the agent data, allowing you to kill all pending
      alarm events for an agent with the specified agent data. To
      determine if a specific alarm is still pending, you need to still
      use the automatically generated alarm ID.

    - Added OTCEV_Shutdown::schedule(). This tries to initiate a shutdown
      of an application in an orderly sequence. It will first broadcast
      a OTCLIB_SHUTDOWN_PENDING notification to agents subscribed to
      OTCEV_Shutdown. It will then wait for a specified period and then
      broadcast OTCLIB_SHUTDOWN_ARRIVED. An idle job will then be scheduled
      which when run will stop the dispatcher. If you are trapping ctrl-c
      to stop an application, you should call this function, although,
      if ctrl-c occurs a second time, you should immediately call exit()
      to stop the program. The delay until finalising shutdown is by
      default 1000 milliseconds. This can be overridden by passing a
      timeout value to the schedule() function. If you don't override
      the delay and the environment variable OTCLIB_SHUTDOWNDELAY is
      defined, the time in milliseconds defined by the environment
      variable will be used instead of the default of 1000 milliseconds.

    - Added OTCEV_Shutdown::monitor(). This function can be given a signal
      number to monitor. If the signal occurs the shutdown procedure will
      be initiated. If a signal occurs when the shutdown procedure is
      already in progress, exit() will be called immediately.

    - The iterators obtainable from OTC_Program over the options of the
      program can now be safely used in multithreaded applications where
      use from different threads at the same time is occuring. This is
      because the iterators are created in unsafe mode. That is they don't
      do reference counting on data structure holding items.

    - The process id and name of the host on which a program is executing
      are now available as member functions of OTC_Program. The member
      functions are hostname() and processId().

    - Added to OTC_Program the uniqueId() function. This function can
      produce system wide unique ids. Useful in distributed systems.
      The id incorporates the host name, process id, time id system was
      initialised in that process, a counter and time counter value
      was acquired.

    - Added OTC_VRecord. This is a simplified version of OTC_Record
      which used vectors internally rather than lists so as to make
      field access quicker. It also cuts down on memory usage. The
      more efficient implementation means that you need to use normal
      character strings and not instances of OTC_String. Further,
      the only type of delimiter accepted is a single character or
      any character from a defined set which will then be handled as if awk
      were being used.

    - The OTC_Logger, OTC_LogStream and OTC_LogBuf classes provided a
      concept of a logger "target". This was intended as a way of tagging
      log messages so they might be captured by special user defined
      loggers. The concept name has been changed to "channel". The
      function for setting this is now setChannel() instead of setTarget(),
      although the old name if kept for backward compatability.

      Previously, even if a target/channel was provided, the log message
      would still be displayed to standard error and output to the log
      file. If the first character of the channel name is now "@", that
      particular message will bypass standard error and the log file and
      will only be passed onto the user defined loggers. This allows you
      to use a user defined logger to accumulate log messages on a channel
      and only output them in some way if necessary and only when you
      want.

    - Added OTC_SLogger class. This is a derived logger class which can
      be used to accumulate log messages output to a particular set of
      channels as defined by a matching regular expression. If used in
      conjunction with channel names starting in "@", the messages will
      not be displayed on standard error or captured in the log file and
      thus will only be captured by an instance of this class tuned into
      those channels. The intent of this class is to capture internally
      generated debug style log messages generated in a block of code
      which you might want to optionally display to the user if something
      goes wrong.

    - Added OTC_ConfigDatabase class. This reads files equivalent to
      X Resource Database files. Ie.,

	key1 : value1
	key2a.key2b : value2
	*.key3 : value3

    - Created static instance of OTC_ConfigDatabase in OTC_Program.
      This instance is accessable through static member functions
      of OTC_Program with similar names to that in OTC_ConfigDatabase,
      the names beeing suffixed by "Config". Eg. lookupConfig() as
      opposed to just lookup().

