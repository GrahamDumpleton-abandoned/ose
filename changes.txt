Changes In OSE 8.2
==================

Improvements
------------

- Minor improvements in the performance of the job dispatcher and event
  delivery system where receiver names are used as the target, by way of
  avoiding redundant memory allocations and string copying where possible.
  This mechanism underlays the whole OTC_Envelope event delivery system and
  the higher level messaging framework so improvements here may positively
  affect these higher level layers.

New Features
------------

- Added numClients() member function to OTC_EPListener for querying the
  number of currently active client connections established through the
  listener.

- Added to OTC_HttpDaemon the member functions suspendListening(),
  resumeListening(), addObserver(), removeObserver(), observersExist() and
  numClients(). These all redirect the call to the contained listener
  object. Together they can be used to monitor client connections as they
  are established and subsequently shutdown. If the number of actual client
  connections reaches some threshold set by user code, the user code could
  suspend the listener preventing it from accepting more connections until
  requests from existing clients have been completed and the number of
  client connections drops back below some threshold. The type of event
  generated and pushed to the registered observers will be the same as
  that generated by OTC_EPListener, specification the OTCEV_Connection
  event class.

- Added to OTC_JobQueue the member functions numPriorityJobs(),
  numStandardJobs() and numIdleJobs() for the purposes of getting back
  some basic information about how many jobs are waiting to be executed.
  The instance OTC_JobQueue in use by the dispatcher is accessible using
  OTC_Dispatcher::queue().

- Added the OTC_JsonRpcServlet and OTC_JsonRpcGateway C++ classes for
  implementing a JSON-RPC gateway into the messaging system. Python
  wrappers for these classes are provided under "netsvc.json".

- Extended OTC_RpcGateway so that it will automatically determine whether
  incoming request is either NET-RPC or XML-RPC and create appropriate
  servlet to handle request as appropriate. Where request isn't one of
  these types, the gateway will instead treat request as a JSON-RPC
  request and create servlet for that instead. This change means that all
  RPC protocol types can be hosted under the same URL. The change in
  functionality also manifests in the Python wrapper for the class.
