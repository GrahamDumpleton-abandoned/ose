Description of some of the programs in this directory are as follows.
Some of the programs have both C++ and Python versions.

  exchange

    Exchange process when running a distributed
    service framework.

  exchange-network

    Exchange process when running a distributed
    service framework. With this program multiple
    server exchange processes can be linked
    together in a star network. Notification is
    given when other client or server exchange
    processes connect.

  netrpc-gateway

    HTTP server process which bridges between
    NET-RPC style RPC over HTTP requests and
    service agent requests.

  xmlrpc-gateway

    HTTP server process which bridges between
    XML-RPC style RPC over HTTP requests and
    service agent requests.

  request-reply

    Standalone example of request/reply
    functionality. Ie., both the client and
    the server are in the same process. The
    server supports getting the uptime and
    multiplying of two values.

  reply

    This contains the same server code as in
    "request-reply" program. There are no
    clients within the same process. Additional
    code has been added to connect to either of
    the exchange process, thus producing a
    server which can be accessed by clients in
    other processes.

  request-uptime

    This contains the client code from the
    "request-reply" program for requesting
    the uptime of the server. The server is
    not within the same process. Additional
    code has been added to connect to either of
    the exchange process, thus producing a
    client which can access servers in other
    processes.

  request-multiply

    This contains the client code from the
    "request-reply" program for requesting
    the server multiply two values. The server is
    not within the same process. Additional
    code has been added to connect to either of
    the exchange process, thus producing a
    client which can access servers in other
    processes.

  publish-subscribe

    Standalone example of the publish/subscribe
    functionality. Ie., both the publisher and
    the subscriber are in the same process.

  publish

    This contains the same publisher code as in
    the "publish-subscribe" program. There is no
    subscriber within the same process. Additional
    code has been added to connect to either of
    the exchange processes, thus producing a
    publisher which can be subscribed to from
    other processes.

  subscribe

    This contains the same subscriber code as in
    the "publish-subscribe" program. There is no
    publisher within the same process. Additional
    code has been added to connect to either of
    the exchange processes, thus producing a
    subscriber which can subscribe to publishers
    in other processes.

  publish-backend

    This is the same as "publish" except that the
    service name is different, the exchange
    group is hard wired and the service audience of
    the publisher is restricted to within the exchange
    group. This is specifically for connecting
    to "publish-frontend".

  publish-frontend

    This is the frontend for "publish-backend". It
    republishes the reports produced by the backend
    process with the exception that it will only
    republish the first report received in each one
    second period.

Examples for running the programs are as follows:

  request-reply

    One client will request uptime for server and
    print it each second. The other client will
    request server multiply two values and print
    out result it receives.

  publish-subscribe

    The subscriber will print each random value
    generated by the publisher. This should occur
    once a second.

  exchange -listen 11111

  reply -connect localhost:11111

  request-uptime -connect localhost:11111
  request-multiply -connect localhost:11111

    Same result as "request-reply" except that
    the clients and server are in separate
    processes. An intermediary exchange process is
    used to pass messages back and forth between
    the clients and the server.

  exchange -listen 11111

  reply -connect localhost:11111

  netrpc-gateway -connect localhost:11111 -listen 8000

    Using an RPC over HTTP client, if a request is sent
    with path /SERVICE on port 8000 of the localhost
    where request method is "multiply" and there
    are two arguments of either floating point or
    integer values, a result will be returned which
    multiplies the two values. The "netrpc-debugger"
    in the "netrpc" demo directory can be used to make
    the RPC over HTTP call.

  exchange -listen 11111

  subscribe -connect localhost:11111

  publish -connect localhost:11111

    Same result as "publish-subscribe" except that
    the publisher and subscriber are in separate
    processes. An intermediary exchange process is
    used to pass messages back and forth between
    the publisher and subscriber processes.

  exchange -listen 11111

  subscribe -connect localhost:11111

  publish -connect localhost:11111
  publish -connect localhost:11111
  publish -connect localhost:11111

    Similar to above but shows that you can have
    multiple publishers active at the same time.
    The subscriber will receive reports from all
    of the publishers.

  exchange-network -listen 11111 -connect localhost:11112
  exchange-network -listen 11112 -connect localhost:11113
  exchange-network -listen 11113 -connect localhost:11111

  subscribe -connect localhost:11111

  publish -connect localhost:11111
  publish -connect localhost:11112
  publish -connect localhost:11113

    When the "exchange-network" process is used,
    you can hook up the exchange processes in a
    star configuration. This would allow each
    machine to have its own local exchange process
    but still be able to communicate with processes
    on another machine. If one machine is shutdown
    the others can still function quite normally.
    This configuration is useful if you need a
    form of redundancy.

  exchange -listen 11111

  subscribe -connect localhost:11111

  publish-frontend -connect localhost:11111 -listen 11112

  publish-backend -connect localhost:11112
  publish-backend -connect localhost:11112
  publish-backend -connect localhost:11112

    This example shows the use of two exchange groups.
    The first exchange group exists between "exchange",
    "subscribe" and "publish-frontend" where "exchange"
    is a server and the others are clients. For the
    second exchange group, "publish-frontend" is also a
    server and "publish-backend" the client. This
    exchange group has a different name than the first,
    with the publisher in "publish-backend" not being
    visible to "subscribe". A proxy in "publish-frontend"
    subscribes to the publishers in the backend processes
    and republishes at most one report per second from the
    backend publishers. That is, it doesn't matter how
    many backend processes there are, the subscriber
    will only see at most one report a second. This example
    shows how private exchange groups can hide redundant
    backend processes.

All process respond to CTRL-C.

Note that if a client fails to connect, it will keep retrying until
the server becomes available.
