This directory contains various examples demonstrating how to use the
"netrpc" and "netsvc" Python modules to do RPC over HTTP using the NET-RPC
protocol. There are additional examples in the "service" directory covering
general use of the "netsvc" module. The "xmlrpc" directory also has
examples but they would need to be changed to use the XML-RPC gateway
instead of the NET-RPC gateway if the NET-RPC protocol was to be used.

The purpose of the code files are as follows:

  netrpc-debugger.py
  xmlrpc-debugger.py

    Graphical based debugger clients. The interface allows you to
    specify a service, the method and the set of parameters to use
    in calling the method. Python style syntax is used for specifying
    the parameters.

    This example requires the Python Mega Widget library from:

      http://pmw.sourceforge.net

  validator-service.py

    Implementation of XML-RPC validator service.

  validator-service.cc

    Implementation of XML-RPC validator service in C++. In this example only
    the NET-RPC protocol is supported. The example would need to be changed
    to use XML-RPC gateway if you want to use the XML-RPC protocol. As the
    XML-RPC gateway is Python code, you would need to use the OSE messaging
    framework and have the XML-RPC gateway in a separate process.

  validator-client.py

    Implementation of client for validator service. In this example the
    NET-RPC protocol is by default used. Optional second argument of
    "XML-RPC" can be used to specify XML-RPC protocol instead of NET-RPC
    protocol.

  introspection-service.py

    Example of how to implement an introspection API. Two possible
    implementations are given. The first uses information that Python keeps
    about itself to automatically create a signature. This is easier to use
    but isn't strictly conformant with the introspection API of XML-RPC.
    The second implementation requires the user to explicitly enumerate the
    signature list and is closer to the introspection API of XML-RPC but
    requires the signature information be supplied when a method is first
    exported. Both implementations use Python doc strings as the method
    help.

  introspection-client.py

    Example of how to use the introspection API to generate a summary
    of the methods supported by a service. By default the NET-RPC
    protocol is used. Optional second argument of "XML-RPC" can be used to
    specify XML-RPC protocol instead of NET-RPC protocol.

  transient-service.py

    Example of how to create service objects on the fly which map to their
    own url and which dissappear after some period of inactivity. This a
    very powerful concept, but you have to be very mindful of circular
    references in Python else your object may not actually get destroyed.
    When this occurs the url may still be callable but all calls will fail
    as the record of what methods can be call will have been deleted.

  transient-client.py

    Example which exercises the transient service example. Lists the
    objects available, deletes some, creates some, sets data etc.

  callback-service.py

    Example of how a service might callback to a client. This is quite
    dangerous as the implementation has a blocking client. Thus the server
    could effectively be frozen if the target of the callback was busy or
    trying to call the server. A non blocking client should be used to do
    this. It also helps if the server is non blocking also.

  callback-client.py

    Example which exercises the callback service.
